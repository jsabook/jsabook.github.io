<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qier&#39;s blog</title>
  <icon>https://blog.wjzhe.ml/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.wjzhe.ml/"/>
  <updated>2022-04-21T12:08:16.849Z</updated>
  <id>https://blog.wjzhe.ml/</id>
  
  <author>
    <name>qier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UseOpenVPN</title>
    <link href="https://blog.wjzhe.ml/2022/04/21/UseOpenVPN/"/>
    <id>https://blog.wjzhe.ml/2022/04/21/UseOpenVPN/</id>
    <published>2022-04-21T12:08:16.849Z</published>
    <updated>2022-04-21T12:08:16.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenVPN使用手册"><a href="#OpenVPN使用手册" class="headerlink" title="OpenVPN使用手册"></a>OpenVPN使用手册</h1><p>使用账号密码认证来配置，可以轻松实现多人登录使用VPN。OpenVPN所有的通信都基于一个单一的IP端口。OpenVPN 是一个开源的应用程序，它允许您通过公共互联网创建一个安全的专用网络。OpenVPN 实现一个虚拟专用网（VPN）来创建一个安全连接。OpenVPN 使用 OpenSSL 库提供加密，它提供了几种身份验证机制，如基于证书的、预共享密钥和用户名/密码身份验证。</p><h1 id="1-软件版本"><a href="#1-软件版本" class="headerlink" title="1. 软件版本"></a>1. 软件版本</h1><ul><li>Centos - 7.9</li><li>easy-rsa - 3.0.8</li><li>OpenVPN - 2.4.7</li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><p>本文使用yum来安装openvpn，openvpn及其依赖的一些包在epel源上，首先先安装epel源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新yum</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="comment">#安装epel源</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">yum install -y openssl lzo pam openssl-devel lzo-devel pam-devel</span><br><span class="line">yum install -y easy-rsa</span><br><span class="line"><span class="comment">#安装openvpn</span></span><br><span class="line">yum install -y openvpn</span><br></pre></td></tr></table></figure><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p>已经安装好了openvpn了，下面我们对openvpn进行配置。</p><h3 id="3-1-连接方式"><a href="#3-1-连接方式" class="headerlink" title="3.1 连接方式"></a>3.1 连接方式</h3><p>使用路由方式连接，确定私有子网：</p><p>Server 与 Client 的VPN通道子网，不要与已有环境的网络冲突即可。</p><p>默认：10.8.0.0/16</p><h3 id="3-2-配置证书密钥"><a href="#3-2-配置证书密钥" class="headerlink" title="3.2 配置证书密钥"></a>3.2 配置证书密钥</h3><p>我们通过yum方式安装的 easy-rsa 版本是3.0.8，直接从安装路径copy一份工具出来。这里用默认的 easy-rsa 3.0.8 来配置生成证书密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制easy-rsa工具</span></span><br><span class="line">cp -rf /usr/share/easy-rsa/3.0.8 /etc/openvpn/server/easy-rsa</span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/server/easy-rsa</span><br><span class="line"><span class="comment">#生成证书密钥</span></span><br><span class="line">./easyrsa init-pki</span><br><span class="line">./easyrsa build-ca nopass</span><br><span class="line">./easyrsa build-server-full server nopass</span><br><span class="line"><span class="comment">#下面这步可能要几分钟</span></span><br><span class="line">./easyrsa gen-dh</span><br><span class="line">openvpn --genkey --secret ta.key  <span class="comment">#TLS-auth密钥</span></span><br></pre></td></tr></table></figure><h3 id="3-3-配置Server端"><a href="#3-3-配置Server端" class="headerlink" title="3.3 配置Server端"></a>3.3 配置Server端</h3><h4 id="3-3-1-创建使用的目录"><a href="#3-3-1-创建使用的目录" class="headerlink" title="3.3.1 创建使用的目录"></a>3.3.1 创建使用的目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志存放目录</span></span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/openvpn/</span><br><span class="line"><span class="comment"># 用户管理目录</span></span><br><span class="line">mkdir -p /etc/openvpn/server/user</span><br><span class="line"><span class="comment"># 配置权限</span></span><br><span class="line">chown -R openvpn:openvpn /var/<span class="built_in">log</span>/openvpn</span><br></pre></td></tr></table></figure><h4 id="3-3-2-创建Server配置文件"><a href="#3-3-2-创建Server配置文件" class="headerlink" title="3.3.2 创建Server配置文件"></a>3.3.2 创建Server配置文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#编辑server.conf文件</span><br><span class="line">yum install -y vim</span><br><span class="line">vim /etc/openvpn/server/server.conf</span><br><span class="line">    </span><br><span class="line">#服务器openvpn基本配置，写入以下内容</span><br><span class="line">    </span><br><span class="line"># 配置权限</span><br><span class="line">port <span class="number">1194</span>  #监听端口号</span><br><span class="line">proto tcp   #服务端用的协议，可以为tcp/udp</span><br><span class="line">dev tun   #指定创建的通信隧道类型，可选tun或tap</span><br><span class="line">user openvpn</span><br><span class="line">group openvpn</span><br><span class="line"></span><br><span class="line">#配置证书信息</span><br><span class="line">ca /etc/openvpn/server/easy-rsa/pki/ca.crt #CA 根证书路径</span><br><span class="line">cert /etc/openvpn/server/easy-rsa/pki/issued/server.crt  <span class="meta">#open VPN 服务器证书路径</span></span><br><span class="line">key /etc/openvpn/server/easy-rsa/pki/<span class="keyword">private</span>/server.key  <span class="meta">#open VPN 服务器密钥路径</span></span><br><span class="line">dh /etc/openvpn/server/easy-rsa/pki/dh.pem #Diffie-Hellman 算法密钥文件路径</span><br><span class="line">tls-auth /etc/openvpn/server/easy-rsa/ta.key <span class="number">0</span> </span><br><span class="line">#  开启TLS-auth，使用防御攻击。服务器端的第二个参数值为<span class="number">0</span>，客户端的为</span><br><span class="line"></span><br><span class="line">#配置账号密码的认证方式</span><br><span class="line">auth-user-pass-verify /etc/openvpn/server/user/checkpsw.sh via-env</span><br><span class="line">script-security <span class="number">3</span></span><br><span class="line">verify-client-cert none</span><br><span class="line">username-as-common-name</span><br><span class="line">client-to-client  #允许客户端与客户端相连接，默认情况下客户端只能与服务器相连接</span><br><span class="line">duplicate-cn</span><br><span class="line"></span><br><span class="line">#配置网络信息</span><br><span class="line">server <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"># 该网段为 open VPN 虚拟网卡网段，不要和内网网段冲突即可。open VPN 默认为 <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 223.5.5.5"</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line">push <span class="string">"route 192.168.1.0 255.255.255.0"</span> #修改网段为内网网段</span><br><span class="line">push <span class="string">"route 192.168.2.0 255.255.255.0"</span> #同上</span><br><span class="line"></span><br><span class="line">compress lzo  #使用lzo压缩的通讯,服务端和客户端都必须配置</span><br><span class="line">cipher AES<span class="number">-256</span>-GCM  #加密认证算法</span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span>  #每<span class="number">10</span>秒ping一次，连接超时时间设为<span class="number">120</span>秒</span><br><span class="line">persist-key  #重启时仍保留一些状态</span><br><span class="line">persist-tun</span><br><span class="line">verb <span class="number">3</span>  #指定日志文件的记录详细级别，可选<span class="number">0</span><span class="number">-9</span>，等级越高日志内容越详细</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> /var/<span class="built_in">log</span>/openvpn/server.<span class="built_in">log</span> #指定 <span class="built_in">log</span> 文件位置</span><br><span class="line"><span class="built_in">log</span>-append /var/<span class="built_in">log</span>/openvpn/server.<span class="built_in">log</span></span><br><span class="line">status /var/<span class="built_in">log</span>/openvpn/status.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="3-3-3-创建用户密码文件"><a href="#3-3-3-创建用户密码文件" class="headerlink" title="3.3.3 创建用户密码文件"></a>3.3.3 创建用户密码文件</h4><p>格式是<code>用户 密码</code>以空格分割即可，这里将用户名设置为<strong>mytest</strong>，密码设置为<strong>mytestpass</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'mytest mytestpass'</span> &gt;&gt; /etc/openvpn/server/user/psw-file</span><br><span class="line">chmod 600 /etc/openvpn/server/user/psw-file</span><br><span class="line">chown openvpn:openvpn /etc/openvpn/server/user/psw-file</span><br></pre></td></tr></table></figure><h4 id="3-3-4-创建密码检查脚本"><a href="#3-3-4-创建密码检查脚本" class="headerlink" title="3.3.4 创建密码检查脚本"></a>3.3.4 创建密码检查脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建shell文件</span></span><br><span class="line">vim /etc/openvpn/server/user/checkpsw.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#在shell文件中写入以下内容</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">PASSFILE=<span class="string">"/etc/openvpn/server/user/psw-file"</span></span><br><span class="line">LOG_FILE=<span class="string">"/var/log/openvpn/password.log"</span></span><br><span class="line">TIME_STAMP=`date <span class="string">"+%Y-%m-%d %T"</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$&#123;PASSFILE&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Could not open password file \"<span class="variable">$&#123;PASSFILE&#125;</span>\" for reading."</span> &gt;&gt;  <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">CORRECT_PASSWORD=`awk <span class="string">'!/^;/&amp;&amp;!/^#/&amp;&amp;$1=="'</span><span class="variable">$&#123;username&#125;</span><span class="string">'"&#123;print $2;exit&#125;'</span> <span class="variable">$&#123;PASSFILE&#125;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\"<span class="variable">$&#123;username&#125;</span>\", password=</span></span><br><span class="line"><span class="string">\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;password&#125;</span>"</span> = <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\"<span class="variable">$&#123;username&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\"<span class="variable">$&#123;username&#125;</span>\", password=</span></span><br><span class="line"><span class="string">\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>赋予可执行的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 &#x2F;etc&#x2F;openvpn&#x2F;server&#x2F;user&#x2F;checkpsw.sh</span><br><span class="line">chown openvpn:openvpn &#x2F;etc&#x2F;openvpn&#x2F;server&#x2F;user&#x2F;checkpsw.sh</span><br></pre></td></tr></table></figure><h4 id="3-3-5-防火墙配置"><a href="#3-3-5-防火墙配置" class="headerlink" title="3.3.5 防火墙配置"></a>3.3.5 防火墙配置</h4><ul><li>防火墙</li></ul><p>禁用centos7默认的firewalld，使用iptables防火墙管理软件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><ul><li>禁用SELinux</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#临时生效</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久关闭，配置后需要重启服务器生效</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><ul><li><p>iptables</p><p>启用iptables</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br><span class="line">systemctl <span class="built_in">enable</span> iptables</span><br><span class="line">systemctl start iptables</span><br><span class="line">iptables -F   <span class="comment"># 清理所有防火墙规则</span></span><br></pre></td></tr></table></figure><p>添加防火墙规则</p><p>将openvpn的网络流量转发到内网（172.31.0.0）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如下网段记得与server.conf 当中定义的网段保持一致</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0&#x2F;24 -o eth0 -j MASQUERADE</span><br><span class="line">iptables -L -t nat</span><br><span class="line">iptables-save &gt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables   # iptables 规则持久化保存</span><br></pre></td></tr></table></figure></li></ul><ul><li>Linux服务器启用地址转发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc.sysctl.conf</span><br><span class="line"><span class="comment">#在最后一行添加以下内容</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>===============================以下是firewalld配置可不看=========================</p><ul><li><p>firewalld</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y firewall-<span class="function">cmd <span class="title">config</span>(<span class="params">替换为下一句</span>)</span></span><br><span class="line"><span class="function">yum install -y firewalld firewall-config</span></span><br><span class="line"><span class="function">firewall-cmd --permanent --<span class="keyword">add</span>-masquerade</span></span><br><span class="line"><span class="function">firewall-cmd --permanent --<span class="keyword">add</span>-service</span>=openvpn</span><br><span class="line"><span class="meta"># 或者添加自定义端口</span></span><br><span class="line">firewall-cmd --permanent  --<span class="keyword">add</span>-port=<span class="number">1194</span>/tcp</span><br><span class="line">firewall-cmd --permanent --direct --passthrough ipv4 -t nat -A POSTROUTING -s <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li></ul><p>注：</p><p>如果执行失败需确认防火墙是否开启。</p><p>1、查看防火墙状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p><img src="image-202112101642112212.png" alt="img"></p><p>inactive表示防火墙为关闭状态。</p><p>2、开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p><img src="1914529-20200402110749768-1286835379.png" alt="img"></p><p>启动后无任何提示，再次查看防火墙状态，可以看到变成active，成功启动。</p><p>3、关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>===============================以上是firewalld配置可不看=========================</p><h4 id="3-3-6-启动服务"><a href="#3-3-6-启动服务" class="headerlink" title="3.3.6 启动服务"></a>3.3.6 启动服务</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup openvpn /etc/openvpn/server/server.conf &gt;<span class="regexp">/dev/</span><span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>启动之后，服务端有一个tun0的网卡，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.8.0.1  netmask 255.255.255.255  destination 10.8.0.2</span><br><span class="line">        inet6 fe80::10da:ceb2:8a1c:4b4f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3  bytes 144 (144.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>开机自启动部分待设定</p><h3 id="3-4-配置客户端"><a href="#3-4-配置客户端" class="headerlink" title="3.4 配置客户端"></a>3.4 配置客户端</h3><p>客户端我们同样使用2.4.7的版本，下载连接：</p><p><a href="https://www.techspot.com/downloads/5182-openvpn.html" target="_blank" rel="noopener">https://www.techspot.com/downloads/5182-openvpn.html</a></p><p>因为我们前面配置的是账号密码认证，所以我们只需要下载ca.crt、ta.key文件即可，从server上将生成的<code>ca.crt</code>、<code>ta.key</code>下载到客户端的安装目录 config下。</p><p><code>ca.crt</code>文件路径：/etc/openvpn/server/easy-rsa/pki/ca.crt</p><p><code>ta.key</code>文件路径：/etc/openvpn/server/easy-rsa/ta.key</p><p> 在config目录下新建一个文件 client.ovpn，文件内容如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">client</span></span><br><span class="line"><span class="selector-tag">proto</span> <span class="selector-tag">tcp</span></span><br><span class="line"><span class="selector-tag">dev</span> <span class="selector-tag">tun</span></span><br><span class="line"><span class="selector-tag">auth-user-pass</span></span><br><span class="line"><span class="selector-tag">remote</span> <span class="selector-tag">your</span><span class="selector-class">.domain</span><span class="selector-class">.com</span> 1194 </span><br><span class="line"><span class="selector-id">#1194</span>为虚机开放的端口号，与前文中的配置要统一</span><br><span class="line"><span class="selector-id">#your</span><span class="selector-class">.domain</span><span class="selector-class">.com</span>替换为<span class="selector-tag">Linux</span>虚机的域名地址或者是该虚机的公有地址</span><br><span class="line"><span class="selector-tag">ca</span> <span class="selector-tag">ca</span><span class="selector-class">.crt</span></span><br><span class="line"><span class="selector-tag">tls-auth</span> <span class="selector-tag">ta</span><span class="selector-class">.key</span> 1</span><br><span class="line"><span class="selector-tag">remote-cert-tls</span> <span class="selector-tag">server</span></span><br><span class="line"><span class="selector-tag">cipher</span> <span class="selector-tag">AES-256-GCM</span></span><br><span class="line"><span class="selector-tag">auth-nocache</span></span><br><span class="line"><span class="selector-tag">persist-tun</span></span><br><span class="line"><span class="selector-tag">persist-key</span></span><br><span class="line"><span class="selector-tag">compress</span> <span class="selector-tag">lzo</span></span><br><span class="line"><span class="selector-tag">verb</span> 3</span><br><span class="line"><span class="selector-tag">mute</span> 10</span><br></pre></td></tr></table></figure><p><img src="image-202202251425255491.png" alt="image-20220225142525549"></p><p>右键openvpn客户端图标的选项，需确认OpenVPN的设置如下：</p><p><img src="image-20220225143238564.png" alt="image-20220225143238563"></p><p>保存退出之后，我们启动openvpn的客户端，然后输入账号密码即可登录。</p><p><img src="image-202202251427318342.png" alt="image-20220225142731834"></p><p>telnet测试内网连通性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telnet 172.31.27.207 22</span><br><span class="line"><span class="comment">#telnet 内网ip 22端口</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;OpenVPN使用手册&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ocrmarche</title>
    <link href="https://blog.wjzhe.ml/2022/04/21/ocrmarche/"/>
    <id>https://blog.wjzhe.ml/2022/04/21/ocrmarche/</id>
    <published>2022-04-21T12:08:16.849Z</published>
    <updated>2022-04-21T12:08:16.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建ECR仓库"><a href="#创建ECR仓库" class="headerlink" title="创建ECR仓库"></a>创建ECR仓库</h1><p><img src="img/image-20220330202021887.png" alt="image-20220330202021887"></p><p>查看推送命令</p><p><img src="img/image-20220330202049665.png" alt="image-20220330202049665"></p><p>依次执行推送命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 629244530291.dkr.ecr.us-east-1.amazonaws.com</span><br></pre></td></tr></table></figure><p>登录成功</p><p><img src="img/image-20220330202822297.png" alt="image-20220330202822297"></p><p>打包镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ocrhandler .</span><br></pre></td></tr></table></figure><p><img src="img/image-20220330202857788.png" alt="image-20220330202857788"></p><p>标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ocrhandler:latest 629244530291.dkr.ecr.us-east-1.amazonaws.com&#x2F;ocrhandler:latest</span><br></pre></td></tr></table></figure><p><img src="img/image-20220330202917632.png" alt="image-20220330202917632"></p><p>推送完毕</p><p><img src="img/image-20220330203210389.png" alt="image-20220330203210389"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 629244530291.dkr.ecr.us-east-1.amazonaws.com &amp;&amp; docker build -t ocrhandler . &amp;&amp; docker tag ocrhandler:latest 629244530291.dkr.ecr.us-east-1.amazonaws.com&#x2F;ocrhandler:latest &amp;&amp; docker push 629244530291.dkr.ecr.us-east-1.amazonaws.com&#x2F;ocrhandler:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;创建ECR仓库&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>InSpec使用</title>
    <link href="https://blog.wjzhe.ml/2022/04/20/InspecUse/"/>
    <id>https://blog.wjzhe.ml/2022/04/20/InspecUse/</id>
    <published>2022-04-20T16:00:00.000Z</published>
    <updated>2022-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chef-InSpec介绍"><a href="#Chef-InSpec介绍" class="headerlink" title="Chef InSpec介绍"></a>Chef InSpec介绍</h1><p>任何业务都依赖于基础设施环境。近年来，基础设施领域已发生了巨大的变化。从最初的传统数据中心到数据中心托管服务，而如今，基础设施即服务和云平台在企业中更受欢迎。因此，大多数企业正在将其工作负载从本地数据中心迁移到云平台。</p><p>为了部署和管理这些复杂的基础设施配置，很多企业使用代码即基础设施（IaC）。当您使用IaC在AWS云平台上创建成百上千个资源时，如何知道代码按预期方式部署了这些资源？这些资源是否遵守合规性和安全性措施？我们并不确定，因此需要基础设施测试程序。</p><p> Chef InSpec是一个用于测试和审核应用程序和基础设施的开源代码框架。Chef InSpec的工作原理是将系统的实际状态与您编写的Chef InSpec代码表达的期望状态进行比较。Chef InSpec可以检测违规并以报告的形式显示。</p><h1 id="Chef-InSpec入门"><a href="#Chef-InSpec入门" class="headerlink" title="Chef InSpec入门"></a>Chef InSpec入门</h1><h2 id="Chef-InSpec安装"><a href="#Chef-InSpec安装" class="headerlink" title="Chef InSpec安装"></a>Chef InSpec安装</h2><p>Chef InSpec提供了适配多种操作系统环境的安装包，这里使用一键脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec</span><br></pre></td></tr></table></figure><p>安装完成后可以看到inspec命令可以正常运行，并提示inspec命令可以使用的参数帮助信息</p><p><img src="img/image-20220421171700452.png" alt="image-20220421171700452"></p><h2 id="Chef-InSpec配置介绍"><a href="#Chef-InSpec配置介绍" class="headerlink" title="Chef InSpec配置介绍"></a>Chef InSpec配置介绍</h2><p>使用Chef InSpec时主要需要弄清楚下面的三部分：</p><ul><li>Command-line interface</li><li>Profile</li><li>Resource</li></ul><p>InSpec CLI使用local，SSH，WinRM，Docker或AWS等连接方式，可针对不同基础设施目标运行测试和审核。常用命令说明如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>archive</td><td>将配置文件压缩成tar.gz（默认）或zip文件</td></tr><tr><td>check</td><td>验证指定路径上的所有测试</td></tr><tr><td>exec</td><td>针对指定目标运行所有测试文件。加载给定的配置文件，并在需要时获取其依赖项。然后连接到目标并执行配置文件中包含的所有控件。输出测试结果。</td></tr><tr><td>help</td><td>查看特定命令的帮助信息</td></tr><tr><td>shell</td><td>打开一个交互式的调试终端</td></tr><tr><td>version</td><td>打印此工具的版本</td></tr></tbody></table><p>Chef InSpec支持创建复杂的测试和合规性配置文件，每个profile文件都是独立的结构，具有自己的执行流程。用户可以自己编写profile文件，还可以在社区支持的Chef Supermarket和GitHub上找到别人写的profile。Profile文件通常具有下面的目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">examples/profile</span><br><span class="line">├── README.md <span class="comment"># md是用于解释profile的适用范围和用法</span></span><br><span class="line">├── controls <span class="comment"># controls是所有测试用例所在的目录</span></span><br><span class="line">│   ├── example.rb</span><br><span class="line">├── libraries <span class="comment"># libraries是用于存放扩展Chef InSpec资源代码的目录</span></span><br><span class="line">│   └── extension.rb</span><br><span class="line">└── inspec.yml <span class="comment"># yml包含配置文件的描述</span></span><br></pre></td></tr></table></figure><p>Chef InSpec拥有80多种可供使用的资源。如果您需要的资源尚未提供，也可以编写自己的自定义资源。Chef InSpec支持的资源列表如下：<a href="https://docs.chef.io/inspec/resources/" target="_blank" rel="noopener">https://docs.chef.io/inspec/resources/</a></p><h2 id="Chef-InSpec测试AWS资源"><a href="#Chef-InSpec测试AWS资源" class="headerlink" title="Chef InSpec测试AWS资源"></a>Chef InSpec测试AWS资源</h2><p>典型的使用环境如下图所示，在数据中心内使用Chef InSpec对AWS进行基础设施资源测试。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/Infrastructure-testing-based-on-Chef-InSpec2.png" alt="img"></p><p>从本地数据中心连接AWS环境需要使用Access Key和Secret Access Key（AKSK）。在企业环境中，通常会将IAM User集中在一个Master账号中进行管理，用户使用IAM User登陆AWS环境，然后再用Assume Role的方式操作其它AWS账户。</p><p>使用Chef InSpec连接AWS前，首先需要创建IAM用户，并生成AKSK。另外在UseCase账号中，需要创建Assume Role，给予适当的权限并允许Master账号中的IAM User切换到Use Case账号。</p><p> 在本地数据中心连接AWS环境的配置示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cat .aws&#x2F;credentials </span><br><span class="line">[default]</span><br><span class="line">aws_access_key_id &#x3D; &lt;Access Key&gt;</span><br><span class="line">aws_secret_access_key &#x3D; &lt;Secret Access Key&gt;</span><br><span class="line"># cat ~&#x2F;.aws&#x2F;config </span><br><span class="line">[default]</span><br><span class="line">region &#x3D; cn-north-1</span><br><span class="line">output &#x3D; json</span><br><span class="line">[profile usecase]</span><br><span class="line">role_arn &#x3D; &lt;UseCase Account IAM Role Arn&gt;</span><br></pre></td></tr></table></figure><p>使用如下命令创建示例profile，该命令会自动生成profile目录结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># inspec init profile --platform aws example</span><br><span class="line">────────────── InSpec Code Generator ────────────── </span><br><span class="line"></span><br><span class="line">Creating new profile at &#x2F;root&#x2F;example</span><br><span class="line"> • Creating file README.md</span><br><span class="line"> • Creating file attributes.yml</span><br><span class="line"> • Creating directory controls</span><br><span class="line"> • Creating file controls&#x2F;example.rb</span><br><span class="line"> • Creating file inspec.yml</span><br></pre></td></tr></table></figure><p>示例代码的测试内容在controls/example.rb文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copyright: 2018, The Authors</span></span><br><span class="line"></span><br><span class="line">title <span class="string">"Sample Section"</span></span><br><span class="line"></span><br><span class="line">aws_vpc_id = attribute(<span class="string">"aws_vpc_id"</span>, value: <span class="string">""</span>, description: <span class="string">"Optional AWS VPC identifier."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># You add controls here</span></span><br><span class="line">control <span class="string">"aws-single-vpc-exists-check"</span> <span class="keyword">do</span> <span class="comment"># A unique ID for this control.</span></span><br><span class="line">  only_if &#123; aws_vpc_id != <span class="string">""</span> &#125; <span class="comment"># Only run this control if the `aws_vpc_id` attribute is provided.</span></span><br><span class="line">  impact 1.0                                                                <span class="comment"># The criticality, if this control fails.</span></span><br><span class="line">  title <span class="string">"Check to see if custom VPC exists."</span>                                <span class="comment"># A human-readable title.</span></span><br><span class="line">  describe aws_vpc(aws_vpc_id) <span class="keyword">do</span>                                           <span class="comment"># The test itself.</span></span><br><span class="line">    it &#123; should exist &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plural resources can be inspected to check for specific resource details.</span></span><br><span class="line">control <span class="string">"aws-vpcs-check"</span> <span class="keyword">do</span></span><br><span class="line">  impact 1.0</span><br><span class="line">  title <span class="string">"Check in all the VPCs for default sg not allowing 22 inwards"</span></span><br><span class="line">  aws_vpcs.vpc_ids.each <span class="keyword">do</span> |vpc_id|</span><br><span class="line">    describe aws_security_group(vpc_id: vpc_id, group_name: <span class="string">"default"</span>) <span class="keyword">do</span></span><br><span class="line">      it &#123; should allow_in(port: 22) &#125;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">control <span class="string">"aws-vpcs-multi-region-status-check"</span> <span class="keyword">do</span>                             <span class="comment"># A unique ID for this control.</span></span><br><span class="line">  impact 1.0                                                                <span class="comment"># The criticality, if this control fails.</span></span><br><span class="line">  title <span class="string">'Check AWS VPCs in all regions have status "available"'</span>             <span class="comment"># A human-readable title.</span></span><br><span class="line">  aws_regions.region_names.each <span class="keyword">do</span> |region|                                 <span class="comment"># Loop over all available AWS regions</span></span><br><span class="line">    aws_vpcs(aws_region: region).vpc_ids.each <span class="keyword">do</span> |vpc|                      <span class="comment"># Find all VPCs in a single AWS region</span></span><br><span class="line">      describe aws_vpc(aws_region: region, vpc_id: vpc) <span class="keyword">do</span>                  <span class="comment"># The test itself.</span></span><br><span class="line">        it &#123; should exist &#125;                                                 <span class="comment"># Confirms AWS VPC exists</span></span><br><span class="line">        it &#123; should be_available &#125;                                          <span class="comment"># Confirms AWS VPC has status "available"</span></span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>该测试的主要内容包含：</p><ul><li>如果传入指定的VPC ID，则检查指定的VPC是否存在</li><li>检查所有VPC的安全组内是否包含允许22端口访问的策略</li><li>检查所有区域内的状态为available的VPC</li></ul><p>执行如下命令运行该profile对AWS环境进行测试：</p> <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inspec exec example -t aws://cn-north-1/usecase</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Profile:</span> AWS InSpec Profile (example)</span><br><span class="line"><span class="symbol">Version:</span> <span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line"><span class="symbol">Target:</span>  <span class="symbol">aws:</span>/<span class="regexp">/cn-north-1</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  ↺  aws-single-vpc-exists-check: Check to see if custom VPC exists.</span></span><br><span class="line"><span class="regexp">     ↺  Skipped control due to only_if condition.</span></span><br><span class="line"><span class="regexp">  ✔  aws-vpcs-check: Check in all the VPCs for default sg not allowing 22 inwards</span></span><br><span class="line"><span class="regexp">     ✔  EC2 Security Group ID: sg-01d67dds39bcffe17 Name: default VPC ID: vpc-032cdd155d561c7bf  is expected to allow in &#123;:port=&gt;22&#125;</span></span><br><span class="line"><span class="regexp">  ✔  aws-vpcs-multi-region-status-check: Check AWS VPCs in all regions have status "available"</span></span><br><span class="line"><span class="regexp">     ✔  VPC vpc-032cdd155d561c7bf in cn-north-1 is expected to exist</span></span><br><span class="line"><span class="regexp">     ✔  VPC vpc-032cdd155d561c7bf in cn-north-1 is expected to be available</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Profile: Amazon Web Services  Resource Pack (inspec-aws)</span></span><br><span class="line"><span class="regexp">Version: 1.31.0</span></span><br><span class="line"><span class="regexp">Target:  aws:/</span><span class="regexp">/cn-north-1</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     No tests executed.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Profile Summary: 2 successful controls, 0 control failures, 1 control skipped</span></span><br><span class="line"><span class="regexp">Test Summary: 3 successful, 0 failures, 1 skipped</span></span><br></pre></td></tr></table></figure><h1 id="InSpec命令行"><a href="#InSpec命令行" class="headerlink" title="InSpec命令行"></a>InSpec命令行</h1><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>在指定位置运行所有测试文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec profile [option]</span><br></pre></td></tr></table></figure><p>该子命令加载给定的配置文件，如果需要，获取它们的依赖项，然后连接到目标并执行配置文件中包含的任何控件。一个或多个报告器用于生成输出。</p><p>exec允许使用不同位置的测试文件</p><p><strong>使用Chef Supermarket:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec <span class="built_in">exec</span> supermarket://username/linux-baseline</span><br></pre></td></tr></table></figure><p><strong>使用本地配置</strong>(执行controls中的所有test文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec &#x2F;path&#x2F;to&#x2F;profile</span><br></pre></td></tr></table></figure><p><strong>使用本地配置</strong>(执行单个test文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec &#x2F;path&#x2F;to&#x2F;a_test.rb</span><br></pre></td></tr></table></figure><p><strong>使用git仓库</strong></p><p>通过SSH链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec git@github.com:dev-sec&#x2F;linux-baseline.git</span><br></pre></td></tr></table></figure><p>使用HTTPS链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec https:&#x2F;&#x2F;github.com&#x2F;dev-sec&#x2F;linux-baseline.git</span><br></pre></td></tr></table></figure><p>私有仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec exec https:&#x2F;&#x2F;api_token@github.com&#x2F;dev-sec&#x2F;linux-baseline.git</span><br></pre></td></tr></table></figure><p><strong>exec 参数</strong> </p><ul><li><code>-t</code>,<code>--target=TARGET</code> 使用 URI 的简单定位选项;</li></ul><h2 id="InSpec项目结构"><a href="#InSpec项目结构" class="headerlink" title="InSpec项目结构"></a>InSpec项目结构</h2><p>配置文件应具有以下结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">examples/profile</span><br><span class="line">├── README.md</span><br><span class="line">├── controls</span><br><span class="line">│   ├── example.rb</span><br><span class="line">│   └── control_etc.rb</span><br><span class="line">├── libraries</span><br><span class="line">│   └── extension.rb</span><br><span class="line">|── files</span><br><span class="line">│   └── extras.conf</span><br><span class="line">└── inspec.yml</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>inspec.yml</code>包括配置文件描述（必需）</li><li><code>controls</code>是所有测试所在的目录（必填）</li><li><code>libraries</code>是所有 Chef InSpec 资源扩展所在的目录（可选）</li><li><code>files</code>是包含配置文件可以访问的附加文件的目录（可选）</li><li><code>README.md</code>应该用来解释概要、它的范围和用途</li></ul><h3 id="inspec-yml配置文件"><a href="#inspec-yml配置文件" class="headerlink" title="inspec.yml配置文件"></a><strong>inspec.yml</strong>配置文件</h3><p>配置文件如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#指定配置文件的唯一名称。必需的。</span><br><span class="line">name: ssh</span><br><span class="line"># title为配置文件指定一个人类可读的名称。</span><br><span class="line">title: Basic SSH</span><br><span class="line"># 指定配置文件维护者</span><br><span class="line">maintainer: Chef Software, Inc.</span><br><span class="line"># 指定版权所有者。</span><br><span class="line">copyright: Chef Software, Inc.</span><br><span class="line"># 指定配置文件的支持联系信息，通常是电子邮件地址。</span><br><span class="line">copyright_email: support@chef.io</span><br><span class="line"># 指定配置文件的许可证。</span><br><span class="line">license: Proprietary, All rights reserved</span><br><span class="line"># 为配置文件指定一行摘要</span><br><span class="line">summary: Verify that SSH Server and SSH Client are configured securely</span><br><span class="line"># 指定配置文件版本</span><br><span class="line">version: 1.0.0</span><br><span class="line"># 指定支持的平台目标列表</span><br><span class="line">supports:</span><br><span class="line">  - platform-family: linux</span><br><span class="line"># 定义此配置文件所依赖的配置文件列表</span><br><span class="line">depends:</span><br><span class="line">  - name: profile</span><br><span class="line">    path: ..&#x2F;path&#x2F;to&#x2F;profile</span><br><span class="line">gem_dependencies:</span><br><span class="line">  - name: &quot;gem-name&quot;</span><br><span class="line">    version: &quot;&gt;&#x3D; 2.0.0&quot;</span><br><span class="line"># 在配置文件可以运行的 Chef InSpec 版本限制</span><br><span class="line">inspec_version: &quot;~&gt; 2.1&quot;</span><br></pre></td></tr></table></figure><p>验证profile是否缺少文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inspec check</span><br></pre></td></tr></table></figure><p>如下所示</p><p><img src="img/image-20220421191315673.png" alt="image-20220421191315673"></p><p><strong>supports,平台支持</strong></p><p>使用文件中的<code>supports</code>设置<code>inspec.yml</code>来指定配置文件所针对的一个（或多个）平台。支持的平台列表可能包含以下内容：</p><ul><li><code>platform-family</code>限制到特定平台系列。</li><li><code>platform-name</code>限制特定平台名称。<code>platform-name</code>支持星号 ( <code>*</code>) 通配符使用。</li><li><code>release</code>限制特定平台版本，并与<code>platform-name</code>. <code>release</code>支持星号 ( <code>*</code>) 通配符使用。</li><li><code>platform</code>限制平台名称或平台系列。</li></ul><p>举例：</p><p>例如，要针对任何运行 Debian Linux 的设备</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">supports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform-name:</span> <span class="string">debian</span></span><br></pre></td></tr></table></figure><p>要仅针对 Ubuntu 版本 20.04，请使用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">supports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform-name:</span> <span class="string">ubuntu</span></span><br><span class="line">    <span class="attr">release:</span> <span class="number">20.04</span></span><br></pre></td></tr></table></figure><p>要针对整个 Windows 2019 平台系列，包括数据中心和核心服务器，请使用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">supports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform-name:</span> <span class="string">windows_server_2019*</span></span><br></pre></td></tr></table></figure><p>要针对在 Amazon AWS 上运行的任何内容，请使用：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ssh</span></span><br><span class="line"><span class="attr">supports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">aws</span></span><br></pre></td></tr></table></figure><p><strong>depends,配置文件依赖项</strong></p><p>在配置文件可以使用来自另一个配置文件的控件之前，需要<code>inspec.yml</code>在该部分的包含配置文件的文件中指定要包含的配置文件<code>depends</code> 。对于要包含的每个配置文件，应包括从中获取配置文件的位置和配置文件的名称。例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depends:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">linux-baseline</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/dev-sec/linux-baseline/archive/master.tar.gz</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ssh-baseline</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/dev-sec/ssh-baseline/archive/master.tar.gz</span></span><br></pre></td></tr></table></figure><p>path,该<code>path</code>设置定义了位于磁盘上的配置文件。此设置通常在开发配置文件和调试配置文件时使用。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depends:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-profile</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/absolute/path</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">another</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">../relative/path</span></span><br></pre></td></tr></table></figure><p><code>url</code>设置指定位于基于 HTTP 或 HTTPS 的 URL 的配置文件。配置文件必须可通过 HTTP GET 操作访问，并且必须是有效的配置文件存档（zip、tar 或 tar.gz 格式）。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depends:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-profile</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://my.domain/path/to/profile.tgz</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">profile-via-git</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://github.com/myusername/myprofile-repo/archive/master.tar.gz</span></span><br></pre></td></tr></table></figure><p>git</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depends:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git-profile</span></span><br><span class="line">  <span class="attr">git:</span> <span class="string">http://url/to/repo</span></span><br><span class="line">  <span class="attr">branch:</span>  <span class="string">desired_branch</span></span><br><span class="line">  <span class="attr">tag:</span>     <span class="string">desired_version</span></span><br><span class="line">  <span class="attr">commit:</span>  <span class="string">pinned_commit</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">semver_via_tags</span></span><br><span class="line">  <span class="attr">relative_path:</span> <span class="string">relative/optional/path/to/profile</span></span><br></pre></td></tr></table></figure><p>surpermarkt</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">depends:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">supermarket-profile</span></span><br><span class="line">  <span class="attr">supermarket:</span> <span class="string">supermarket-username/supermarket-profile</span></span><br></pre></td></tr></table></figure><h3 id="controls-配置"><a href="#controls-配置" class="headerlink" title="controls 配置"></a>controls 配置</h3><p><strong>包括配置文件中的所有控件</strong></p><p>使用配置文件中的include_controls命令，每次执行包含配置文件时，都将执行命名配置文件中的所有控件。</p><p><img src="https://docs.chef.io/images/inspec/include_controls.png" alt="包括控件"></p><p>在上面的例子中，每次<code>my-app-profile</code>执行时，所有的控件<code>my-baseline</code>也都被执行。因此，将执行以下控制：</p><ul><li>myapp-1</li><li>myapp-2</li><li>myapp-3</li><li>baseline-1</li><li>baseline-2</li></ul><p>这是一个很好的提醒，当包含来自其他配置文件的控件时，为控件设置良好的命名约定有助于避免混淆！</p><p><strong>从配置文件中跳过控件</strong></p><p>如果包含的配置文件中的一项控制不适用于您的环境怎么办？幸运的是，不必为了删除控件而维护包含的配置文件的稍微修改的副本。该<code>skip_control</code>命令告诉 Chef InSpec 不要运行特定控件。</p><p><img src="https://docs.chef.io/images/inspec/include_controls_with_skip.png" alt="包括带有跳过的控件"></p><p>在上面的示例中，除了来自配置文件的控制<strong>之外</strong><code>my-app-profile</code>，<code>my-baseline</code>每次执行时都会<code>my-app-profile</code>执行来自配置文件的所有控件。<code>baseline-2``my-baseline</code></p><p><strong>修改控件</strong></p><p>假设仍应运行包含配置文件中的特定控件，但影响不合适？也许测试应该仍然运行，但如果它失败了，它应该被视为低严重性而不是高严重性？当包含一个控件时，它也可以被修改！</p><p><img src="https://docs.chef.io/images/inspec/include_controls_with_mod.png" alt="包含带有修改的控件"></p><p><strong>使用包含的配置文件中的资源</strong></p><p>默认情况下，列出的依赖项中的所有自定义资源都可用于您的配置文件。如果您的两个依赖项提供了同名的资源，则可以使用<code>require_resource</code>DSL 函数来消除两者的歧义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require_resource(profile: &#39;my_dep&#39;, resource: &#39;my_res&#39;,</span><br><span class="line">                  as: &#39;my_res2&#39;)</span><br></pre></td></tr></table></figure><h1 id="InSpec语法"><a href="#InSpec语法" class="headerlink" title="InSpec语法"></a>InSpec语法</h1><p>语句块</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220421170635101.png" alt="image-20220421170635101"></p><h2 id="配置文件输入"><a href="#配置文件输入" class="headerlink" title="配置文件输入"></a>配置文件输入</h2><p>Chef InSpec 配置文件可能包含可在测试期间访问的其他文件。配置文件使您能够将测试的逻辑与您的测试检查的数据分开，例如，您需要打开的端口列表。</p><p>要访问这些文件，它们必须存储在<code>files</code>配置文件的根目录中。它们是通过相对于该文件夹的名称访问的，带有 <code>inspec.profile.file(...)</code>.这是一个读取和测试端口列表的示例。文件夹结构为：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">examples/profile</span><br><span class="line">├── controls</span><br><span class="line">│   ├── example.rb</span><br><span class="line">│── files</span><br><span class="line">│   └── services.yml</span><br><span class="line">└── inspec.yml</span><br></pre></td></tr></table></figure><p><strong>services.yml</strong>内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- service_name: httpd-alpha</span><br><span class="line">  port: 80</span><br><span class="line">- service_name: httpd-beta</span><br><span class="line">  port: 8080</span><br></pre></td></tr></table></figure><p><code>example.rb</code>现在可以访问此文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_services = yaml(<span class="symbol">content:</span> inspec.profile.file(<span class="string">'services.yml'</span>)).params</span><br><span class="line"></span><br><span class="line">my_services.each <span class="keyword">do</span> <span class="params">|s|</span></span><br><span class="line">  describe service(s[<span class="string">'service_name'</span>]) <span class="keyword">do</span></span><br><span class="line">    it &#123; should be_running &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">describe port(s[<span class="string">'port'</span>]) <span class="keyword">do</span></span><br><span class="line">  it &#123; should be_listening &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>有关使用配置文件的更完整示例，请参阅 Learn Chef Rally 上的<a href="https://learn.chef.io/modules/explore-inspec-resources#/" target="_blank" rel="noopener">探索 Chef InSpec 资源。</a></p><h2 id="“should”-vs-“expect”-syntax"><a href="#“should”-vs-“expect”-syntax" class="headerlink" title="“should” vs. “expect” syntax"></a>“should” vs. “expect” syntax</h2><p>Chef InSpec 将继续支持这两种编写测试的方法。考虑这个<code>file</code>测试：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe file(<span class="string">'/tmp/test.txt'</span>) <span class="keyword">do</span></span><br><span class="line">  it &#123; should be_file &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>expect</code>这可以用语法重写</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe file(<span class="string">'/tmp/test.txt'</span>) <span class="keyword">do</span></span><br><span class="line">  it <span class="string">'should be a file'</span> <span class="keyword">do</span></span><br><span class="line">    expect(subject).to(be_file)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上述两个示例的输出如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File /tmp/test.txt</span><br><span class="line">   ✔  should be a file</span><br></pre></td></tr></table></figure><p>Chef InSpec 建议使用该<code>should</code> 语法，因为它往往更容易为那些技术不高的用户阅读。</p><p>此外，您可以使用<code>subject</code>关键字来进一步控制您的输出，如果您选择：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">'test file'</span> <span class="keyword">do</span></span><br><span class="line">  subject &#123; file(<span class="string">'/tmp/test.txt'</span>) &#125;</span><br><span class="line">  it <span class="string">'should be a file'</span> <span class="keyword">do</span></span><br><span class="line">    expect(subject).to(be_file)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>关键词</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe Entity(Property) <span class="keyword">do</span></span><br><span class="line">Matcher</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="通用匹配器参考"><a href="#通用匹配器参考" class="headerlink" title="通用匹配器参考"></a>通用匹配器参考</h2><p><strong>be</strong></p><p>这个匹配器后面可以跟许多不同的比较运算符。始终确保使用数字而不是字符串进行这些比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe file(&#39;&#x2F;proc&#x2F;cpuinfo&#39;) do</span><br><span class="line">  its(&#39;size&#39;) &#123; should be &gt;&#x3D; 10 &#125;</span><br><span class="line">  its(&#39;size&#39;) &#123; should be &lt; 1000 &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>CMP</strong></p><p>与<code>eq</code>,不同<code>cmp</code>的是，用于限制较少的比较的匹配器。它将尝试将实际值与您要与之进行比较的类型相匹配。这是为了让用户不必编写类型转换和解析。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe sshd_config <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'Protocol'</span>) &#123; should cmp <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">describe passwd.uid(<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'users'</span>) &#123; should cmp <span class="string">'root'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>cmp</code>行为方式如下：</p><ul><li>比较字符串和数字</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe sshd_config <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Only `'2'` works</span></span><br><span class="line">  its(<span class="string">'Protocol'</span>) &#123; should eq <span class="string">'2'</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Both of these work</span></span><br><span class="line">  its(<span class="string">'Protocol'</span>) &#123; should cmp <span class="string">'2'</span> &#125;</span><br><span class="line">  its(<span class="string">'Protocol'</span>) &#123; should cmp <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>字符串比较不区分大小写</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe auditd_conf <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'log_format'</span>) &#123; should cmp <span class="string">'raw'</span> &#125;</span><br><span class="line">  its(<span class="string">'log_format'</span>) &#123; should cmp <span class="string">'RAW'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>识别嵌入在字符串中的版本</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe package(<span class="string">'curl'</span>) <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'version'</span>) &#123; should cmp &gt; <span class="string">'7.35.0-1ubuntu2.10'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>将只有一个条目的数组与一个值进行比较</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe passwd.uids(<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'users'</span>) &#123; should cmp <span class="string">'root'</span> &#125;</span><br><span class="line">  its(<span class="string">'users'</span>) &#123; should cmp [<span class="string">'root'</span>] &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>字符串的单值数组也可以与正则表达式进行比较</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe auditd_conf <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'log_format'</span>) &#123; should cmp /raw/i &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>改进了八进制比较的打印</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe file(<span class="string">'/proc/cpuinfo'</span>) <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'mode'</span>) &#123; should cmp <span class="string">'0345'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">expected:</span> <span class="number">0345</span></span><br><span class="line"><span class="symbol">got:</span> <span class="number">0444</span></span><br></pre></td></tr></table></figure><p><strong>eq</strong></p><p>测试两个值是否完全相等。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe sshd_config <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'RSAAuthentication'</span>) &#123; should_not eq <span class="string">'no'</span> &#125;</span><br><span class="line">  its(<span class="string">'Protocol'</span>) &#123; should eq <span class="string">'2'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>eq</code>如果类型不匹配则失败。在比较数字的配置条目时，请记住这一点：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">its(<span class="string">'Port'</span>) &#123; should eq <span class="string">'22'</span> &#125; <span class="comment"># ok</span></span><br><span class="line"></span><br><span class="line">its(<span class="string">'Port'</span>) &#123; should eq <span class="number">22</span> &#125;</span><br><span class="line"><span class="comment"># fails: '2' != 2 (string vs int)</span></span><br></pre></td></tr></table></figure><p>对于限制较少的比较，请使用<code>cmp</code>.</p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>验证值是否包含在列表中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe passwd <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'users'</span>) &#123; should <span class="keyword">include</span> <span class="string">'my_user'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>be_in</strong></p><p>验证对象是否包含在列表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe resource do</span><br><span class="line">  its(&#39;item&#39;) &#123; should be_in LIST &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>match</strong></p><p>检查字符串是否匹配正则表达式。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe sshd_config <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'Ciphers'</span>) &#123; should_not match /cbc/ &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>以下资源测试 |ssh| 服务器配置。例如，一个简单的控件可以描述为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe sshd_config <span class="keyword">do</span></span><br><span class="line">  its(<span class="string">'Port'</span>) &#123; should cmp <span class="number">22</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在各种用例中，例如在不同部门实施 IT 合规性，使用元数据扩展控制变得很方便。每个控件都可以定义一个附加<code>impact</code>的<code>title</code>或<code>desc</code>。一个示例如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">control &#39;sshd-8&#39; do</span><br><span class="line">  impact 0.6</span><br><span class="line">  title &#39;Server: Configure the service port&#39;</span><br><span class="line">  desc &#39;Always specify which port the SSH server should listen.&#39;</span><br><span class="line">  desc &#39;rationale&#39;, &#39;This ensures that there are no unexpected settings&#39; # Requires Chef InSpec &gt;&#x3D;2.3.4</span><br><span class="line">  tag &#39;ssh&#39;,&#39;sshd&#39;,&#39;openssh-server&#39;</span><br><span class="line">  tag cce: &#39;CCE-27072-8&#39;</span><br><span class="line">  ref &#39;NSA-RH6-STIG - Section 3.5.2.1&#39;, url: &#39;https:&#x2F;&#x2F;www.nsa.gov&#x2F;ia&#x2F;_files&#x2F;os&#x2F;redhat&#x2F;rhel5-guide-i731.pdf&#39;</span><br><span class="line"></span><br><span class="line">  describe sshd_config do</span><br><span class="line">    its(&#39;Port&#39;) &#123; should cmp 22 &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>元数据说明：</p><ul><li>‘sshd-8’是控件的名称</li><li>ref是对外部文档的引用</li><li>describe是一个包含至少一个测试的块。一个control块必须至少包含一个describe块，但可以包含任意多个</li><li>sshd_config是 Chef InSpec 资源。有关 Chef InSpec 资源的完整列表，请参阅 Chef InSpec 资源文档。</li><li>its(‘Port’)是Chef InSpecde1；{ should eq ‘22’ }是单元测试。一个describe块必须至少包含一个匹配器，但可以包含任意数量的匹配器。</li></ul><h2 id="检查至少一个条件是否通过describe-one"><a href="#检查至少一个条件是否通过describe-one" class="headerlink" title="检查至少一个条件是否通过describe.one"></a>检查至少一个条件是否通过<code>describe.one</code></h2><p>使用 Chef InSpec，您可以检查一组检查中的至少一个是否为真。例如，如果您在两个不同的位置配置一个设置，那么您可能想要测试是否设置了配置 A 或配置 B。用块做这个任务<code>describe.one</code>。 <code>describe.one</code>定义一组<code>describe</code>块，其中只有一个块需要通过。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe.one <span class="keyword">do</span></span><br><span class="line">  describe ConfigurationA <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'setting_1'</span>) &#123; should eq <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe ConfigurationB <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'setting_2'</span>) &#123; should eq <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="describe-one使用说明"><a href="#describe-one使用说明" class="headerlink" title="describe.one使用说明"></a><code>describe.one</code>使用说明</h4><ul><li>如果其中一个<code>describe.one</code>嵌套<code>describe</code>块的所有断言都通过了，则该块通过。一个<code>describe.one</code>块需要整个<code>describe</code>块才能通过，而不仅仅是一个断言。</li><li>Chef InSpec 将始终评估<code>describe.one</code>. <code>describe</code>它不会在评估通过的块时短路。</li><li>不支持将一个块嵌套<code>describe.one</code>在另一个块内。<code>describe.one</code></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>以下示例显示了使用单个<code>control</code>模块的简单合规性测试。</p><h3 id="测试系统事件日志"><a href="#测试系统事件日志" class="headerlink" title="测试系统事件日志"></a>测试系统事件日志</h3><p>以下测试显示了如何审核运行 Windows 2012 R2 且启用了密码复杂性的计算机：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'windows-account-102'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="string">'critical'</span></span><br><span class="line">  title <span class="string">'Windows Password Complexity is Enabled'</span></span><br><span class="line">  desc <span class="string">'Password must meet complexity requirement'</span></span><br><span class="line">  describe security_policy <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'PasswordComplexity'</span>) &#123; should cmp <span class="number">1</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="测试-PostgreSQL-密码是否为空"><a href="#测试-PostgreSQL-密码是否为空" class="headerlink" title="测试 PostgreSQL 密码是否为空"></a>测试 PostgreSQL 密码是否为空</h3><p>以下测试展示了如何审计运行 PostgreSQL 的机器以确保密码不为空。</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'postgres-7'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">1.0</span></span><br><span class="line">  title <span class="string">"Don't allow empty passwords"</span></span><br><span class="line">  describe postgres_session(<span class="string">'user'</span>, <span class="string">'pass'</span>).query(<span class="string">"SELECT * FROM pg_shadow WHERE passwd IS NULL;"</span>) <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'output'</span>) &#123; should cmp <span class="string">''</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="测试-MySQL-密码是否在-ENV-中"><a href="#测试-MySQL-密码是否在-ENV-中" class="headerlink" title="测试 MySQL 密码是否在 ENV 中"></a>测试 MySQL 密码是否在 ENV 中</h3><p>以下测试显示了如何审计运行 MySQL 的机器以确保密码不存储在<code>ENV</code>：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'mysql-3'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">1.0</span></span><br><span class="line">  title <span class="string">'Do not store your MySQL password in your ENV'</span></span><br><span class="line">  desc <span class="string">'</span></span><br><span class="line"><span class="string">    Storing credentials in your ENV may easily expose</span></span><br><span class="line"><span class="string">    them to an attacker. Prevent this at all costs.</span></span><br><span class="line"><span class="string">  '</span></span><br><span class="line">  describe command(<span class="string">'env'</span>) <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'stdout'</span>) &#123; should_not match /^MYSQL_PWD=<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">  end</span></span><br><span class="line"><span class="regexp">end</span></span><br></pre></td></tr></table></figure><h3 id="测试是否-etc-ssh是目录"><a href="#测试是否-etc-ssh是目录" class="headerlink" title="测试是否/etc/ssh是目录"></a>测试是否<code>/etc/ssh</code>是目录</h3><p>以下测试显示了如何审计机器以确保它<code>/etc/ssh</code>是一个目录：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'basic-1'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">1.0</span></span><br><span class="line">  title <span class="string">'/etc/ssh should be a directory'</span></span><br><span class="line">  desc <span class="string">'</span></span><br><span class="line"><span class="string">    In order for OpenSSH to function correctly, its</span></span><br><span class="line"><span class="string">    configuration path must be a folder.</span></span><br><span class="line"><span class="string">  '</span></span><br><span class="line">  describe file(<span class="string">'/etc/ssh'</span>) <span class="keyword">do</span></span><br><span class="line">    it &#123; should be_directory &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="测试-Apache-是否运行"><a href="#测试-Apache-是否运行" class="headerlink" title="测试 Apache 是否运行"></a>测试 Apache 是否运行</h3><p>以下测试显示了如何审计机器以确保 Apache 已启用并正在运行：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'apache-1'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="string">'medium'</span></span><br><span class="line">  title <span class="string">'Apache2 should be configured and running'</span></span><br><span class="line">  describe service(apache.service) <span class="keyword">do</span></span><br><span class="line">    it &#123; should be_enabled &#125;</span><br><span class="line">    it &#123; should be_running &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="测试是否安装了不安全的软件包"><a href="#测试是否安装了不安全的软件包" class="headerlink" title="测试是否安装了不安全的软件包"></a>测试是否安装了不安全的软件包</h3><p>以下测试显示了如何审计机器是否存在不安全的包：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'cis-os-services-5.1.3'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">0</span>.<span class="number">7</span></span><br><span class="line">  title <span class="string">'5.1.3 Ensure rsh client is not installed'</span></span><br><span class="line">  describe package(<span class="string">'rsh'</span>) <span class="keyword">do</span></span><br><span class="line">    it &#123; should_not be_installed &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  describe package(<span class="string">'rsh-redone-client'</span>) <span class="keyword">do</span></span><br><span class="line">    it &#123; should_not be_installed &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="测试-Windows-注册表项"><a href="#测试-Windows-注册表项" class="headerlink" title="测试 Windows 注册表项"></a>测试 Windows 注册表项</h3><p>以下测试显示如何审核机器以确保启用安全 DLL 搜索模式：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'windows-base-101'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">1.0</span></span><br><span class="line">  title <span class="string">'Safe DLL Search Mode is Enabled'</span></span><br><span class="line">  desc <span class="string">'</span></span><br><span class="line"><span class="string">    @link: https://msdn.microsoft.com/en-us/library/ms682586(v=vs.85).aspx</span></span><br><span class="line"><span class="string">  '</span></span><br><span class="line">  describe registry_key(<span class="string">'HKLM\\System\\CurrentControlSet\\Control\\Session Manager'</span>) <span class="keyword">do</span></span><br><span class="line">    it &#123; should exist &#125;</span><br><span class="line">    it &#123; should_not have_property_value(<span class="string">'SafeDllSearchMode'</span>, <span class="symbol">:type_dword</span>, <span class="string">'0'</span>) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="用于only-if排除特定控件"><a href="#用于only-if排除特定控件" class="headerlink" title="用于only_if排除特定控件"></a>用于<code>only_if</code>排除特定控件</h3><p>此示例说明如果使用 不满足条件，如何允许跳过某些控件<code>only_if</code>。在本例中，如果<code>redis-cli</code>命令不存在，则不会执行控制。可选消息可以说明它被跳过的原因。</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'nutcracker-connect-redis-001'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="string">'critical'</span></span><br><span class="line">  title <span class="string">'Check if nutcracker can pass commands to redis'</span></span><br><span class="line">  desc <span class="string">'execute redis-cli set key command, to check connectivity of the service'</span></span><br><span class="line"></span><br><span class="line">  only_if(<span class="string">'redis is not installed.'</span>) <span class="keyword">do</span></span><br><span class="line">    command(<span class="string">'redis-cli'</span>).exist?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  describe command(<span class="string">'redis-cli SET test_inspec "HELLO"'</span>) <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'stdout'</span>) &#123; should match /OK/ &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>此示例检查是否安装了某些 pip 包，但前提是 ‘/root/.aws’ 存在：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'pip-packages-installed'</span> <span class="keyword">do</span></span><br><span class="line">  title <span class="string">'Check if essential pips are installed'</span></span><br><span class="line">  only_if(<span class="string">'aws-cli config not created.'</span>) <span class="keyword">do</span></span><br><span class="line">    directory(<span class="string">'/root/.aws'</span>).exist?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="string">%w(aws-mfa PyYAML awscli)</span>.each <span class="keyword">do</span> <span class="params">|aws_pip_deps|</span></span><br><span class="line">    describe pip(aws_pip_deps) <span class="keyword">do</span></span><br><span class="line">      it &#123; should be_installed &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>将其与其他条件混合，例如检查文件是否存在，有助于使用 Chef InSpec 测试不同的测试路径。通过这种方式，您可以跳过某些控件，这些控件由于服务器的准备方式而 100% 失败，但是您知道相同的控件套件稍后会在不同的情况下被不同的团队重用。</p><p>关于<code>only_if</code>：</p><ul><li><code>only_if</code>适用于整个<code>control</code>. 如果<code>only_if</code> 块的结果评估为 false，则作为块的一部分提及的任何 Chef InSpec 资源 <code>describe</code>都不会运行。此外，描述块的内容将不会运行。但是，only_if 语句之前的裸 Ruby 表达式和裸 Chef InSpec 资源（不与描述块关联）将运行</li></ul><p>为了显示：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">"whatruns"</span> <span class="keyword">do</span></span><br><span class="line">  command(<span class="string">"do_something"</span>) <span class="comment"># This will ALWAYS run</span></span><br><span class="line">  describe command(<span class="string">"do_another_thing"</span>) <span class="keyword">do</span> <span class="comment"># This will not run</span></span><br><span class="line">    command(<span class="string">"do_yet_another_thing"</span>) <span class="comment"># This will not run</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  only_if &#123; <span class="literal">false</span> &#125;</span><br><span class="line">  command(<span class="string">"do_something_else"</span>) <span class="comment"># This will not run</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>每个块只<code>only_if</code>允许一个。<code>control</code>如果存在多个<code>only_if</code>块，则仅使用最后一个<code>only_if</code>块</li><li>如果在控制块之外使用，<code>only_if</code>则跳过当前文件中的所有控件</li><li>要实现复杂的逻辑，请在块中使用 Ruby ‘or’ ( <code>||</code>) 和 ‘and’ ( <code>&amp;&amp;</code>) <code>only_if</code>：</li></ul><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">only_if(<span class="string">'ready for launch'</span>) <span class="keyword">do</span></span><br><span class="line">  rocket_is_ready &amp;&amp; weather_is_clear</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="控件的附加元数据"><a href="#控件的附加元数据" class="headerlink" title="控件的附加元数据"></a>控件的附加元数据</h3><p>以下示例说明了添加标签和引用的各种方法<code>control</code></p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">control <span class="string">'ssh-1'</span> <span class="keyword">do</span></span><br><span class="line">  impact <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">  title <span class="string">'Allow only SSH Protocol 2'</span></span><br><span class="line">  desc <span class="string">'</span></span><br><span class="line"><span class="string">    Only SSH protocol version 2 connections should be permitted.</span></span><br><span class="line"><span class="string">    The default setting in /etc/ssh/sshd_config is correct, and can be</span></span><br><span class="line"><span class="string">    verified by ensuring that the following line appears: Protocol 2</span></span><br><span class="line"><span class="string">  '</span></span><br><span class="line"></span><br><span class="line">  tag <span class="string">'production'</span>,<span class="string">'development'</span></span><br><span class="line">  tag <span class="string">'ssh'</span>,<span class="string">'sshd'</span>,<span class="string">'openssh-server'</span></span><br><span class="line"></span><br><span class="line">  tag <span class="symbol">cce:</span> <span class="string">'CCE-27072-8'</span></span><br><span class="line">  tag <span class="symbol">disa:</span> <span class="string">'RHEL-06-000227'</span></span><br><span class="line"></span><br><span class="line">  tag <span class="symbol">remediation:</span> <span class="string">'stig_rhel6/recipes/sshd-config.rb'</span></span><br><span class="line">  tag <span class="symbol">remediation:</span> <span class="string">'https://supermarket.chef.io/cookbooks/ssh-hardening'</span></span><br><span class="line"></span><br><span class="line">  ref <span class="string">'NSA-RH6-STIG - Section 3.5.2.1'</span>, <span class="symbol">url:</span> <span class="string">'https://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf'</span></span><br><span class="line">  ref <span class="string">'http://people.redhat.com/swells/scap-security-guide/RHEL/6/output/ssg-centos6-guide-C2S.html'</span></span><br><span class="line"></span><br><span class="line">  describe ssh_config <span class="keyword">do</span></span><br><span class="line">    its(<span class="string">'Protocol'</span>) &#123; should cmp <span class="number">2</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="在-InSpec-中使用-Ruby"><a href="#在-InSpec-中使用-Ruby" class="headerlink" title="在 InSpec 中使用 Ruby"></a>在 InSpec 中使用 Ruby</h2><p>Chef InSpec 语言是一种基于 Ruby 的语言。这使您可以灵活地使用控件中的 Ruby 代码：</p><p>复制</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_obj = json(<span class="string">'/file.json'</span>)</span><br><span class="line">json_obj[<span class="string">'keys'</span>].each <span class="keyword">do</span> <span class="params">|value|</span></span><br><span class="line">  ..</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Ruby 允许很多自由，但应该限制控件，以便它们保持可移植性和易于理解。请参阅我们的<a href="https://docs.chef.io/inspec/style/" target="_blank" rel="noopener">个人资料风格指南</a>。</p><p>核心和自定义资源被编写为继承自 <code>Inspec.resource</code>.</p><h1 id="Ruby-语法"><a href="#Ruby-语法" class="headerlink" title="Ruby 语法"></a>Ruby 语法</h1><h2 id="Ruby数据类型"><a href="#Ruby数据类型" class="headerlink" title="Ruby数据类型"></a>Ruby数据类型</h2><p><strong>整数</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>                  <span class="comment"># Fixnum 十进制</span></span><br><span class="line"><span class="number">1_234</span>                <span class="comment"># Fixnum 带有下划线的十进制</span></span><br><span class="line">-<span class="number">500</span>                 <span class="comment"># 负的 Fixnum</span></span><br></pre></td></tr></table></figure><p><strong>浮点型</strong><br>Ruby 支持浮点数。它们是带有小数的数字。浮点数是类 <em>Float</em> 的对象，且可以是下列中任意一个。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123.4</span>                <span class="comment"># 浮点值</span></span><br><span class="line"><span class="number">1.0</span>e6                <span class="comment"># 科学记数法</span></span><br><span class="line"><span class="number">4</span>E2<span class="number">0</span>                 <span class="comment"># 不是必需的</span></span><br></pre></td></tr></table></figure><p><strong>算术操作</strong></p><p>加减乘除操作符：+-<em>/；指数操作符为*</em></p><p>指数不必是整数，例如</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指数算术，结果 16</span></span><br><span class="line">puts <span class="number">2</span>**(<span class="number">1</span>/<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 加法运算,结果4</span></span><br><span class="line">puts <span class="number">2</span>+<span class="number">2</span></span><br><span class="line"><span class="comment"># 除法,结果2</span></span><br><span class="line">puts <span class="number">2</span>/<span class="number">1</span></span><br><span class="line"><span class="comment"># 混合运算</span></span><br><span class="line">puts <span class="number">16</span>**(<span class="number">1</span>/<span class="number">4.0</span>)<span class="comment">#1与4.0的商为0.25（四分之一），然后开四次方根</span></span><br></pre></td></tr></table></figure><p><strong>字符串类型</strong></p><p>Ruby 字符串简单地说是一个 8 位字节序列，它们是类 String 的对象。</p><p>双引号标记的字符串允许替换和使用反斜线符号，单引号标记的字符串不允许替换，且只允许使用 \ 和 &#39; 两个反斜线符号。进行转义</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby -w</span></span><br><span class="line"> </span><br><span class="line">puts <span class="string">'escape using "\\"'</span>;</span><br><span class="line">puts <span class="string">'That\'s right'</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">escape using &quot;\&quot;</span><br><span class="line">That&#39;s right</span><br></pre></td></tr></table></figure><p>可以使用序列 <strong>#{ expr }</strong> 替换任意 Ruby 表达式的值为一个字符串。在这里，expr 可以是任意的 Ruby 表达式。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby -w</span></span><br><span class="line"> </span><br><span class="line">name=<span class="string">"Ruby"</span> </span><br><span class="line">puts name </span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;name+<span class="string">",ok"</span>&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ruby</span><br><span class="line">Ruby,ok</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Ruby支持以下三种数据结构:</p><ul><li>数组</li><li>哈希类型</li><li>范围类型</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组字面量通过[]中以逗号分隔定义，且支持range定义。</p><ul><li>数组通过[]索引访问</li></ul><ul><li>通过赋值操作插入、删除、替换元素</li><li>通过+，－号进行合并和删除元素，且集合做为新集合出现</li><li>通过&lt;&lt;号向原数据追加元素</li><li>通过*号重复数组元素</li><li>通过｜和&amp;符号做并集和交集操作（注意顺序）</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line">ary = [ <span class="string">"fred"</span>, <span class="number">10</span>, <span class="number">3.14</span>, <span class="string">"This is a string"</span>, <span class="string">"last element"</span>, ]</span><br><span class="line">ary.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    puts i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>创建数组</strong></p><p>有多种方式创建或初始化数组。一种方式是通过 <em>new</em> 类方法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = Array.new</span><br></pre></td></tr></table></figure><p>您可以在创建数组的同时设置数组的大小：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = Array.new(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>数组 <em>names</em> 的大小或长度为 20 个元素。您可以使用 size 或 length 方法返回数组的大小：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"> </span><br><span class="line">names = Array.new(<span class="number">20</span>)</span><br><span class="line">puts names.size  <span class="comment"># 返回 20</span></span><br><span class="line">puts names.length <span class="comment"># 返回 20</span></span><br></pre></td></tr></table></figure><p><strong>赋值</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = Array.new(<span class="number">4</span>, <span class="string">"mac"</span>)</span><br><span class="line">names[<span class="number">1</span>]=<span class="string">'windows'</span></span><br><span class="line">puts <span class="string">"<span class="subst">#&#123;names&#125;</span>"</span> <span class="comment"># 输出结果，["mac", "windows", "mac", "mac"]</span></span><br></pre></td></tr></table></figure><h2 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a><strong>哈希类型</strong></h2><p>Ruby 哈希是在大括号内放置一系列键/值对，键和值之间使用逗号和序列 =&gt; 分隔。尾部的逗号会被忽略。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"> </span><br><span class="line">hsh = colors = &#123; <span class="string">"red"</span> =&gt; <span class="number">0xf00</span>, <span class="string">"green"</span> =&gt; <span class="number">0x0f0</span>, <span class="string">"blue"</span> =&gt; <span class="number">0x00f</span> &#125;</span><br><span class="line">hsh.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">    print key, <span class="string">" is "</span>, value, <span class="string">"\n"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这将产生以下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">red is 3840</span><br><span class="line">green is 240</span><br><span class="line">blue is 15</span><br></pre></td></tr></table></figure><p><strong>创建哈希</strong><br>与数组一样，有各种不同的方式来创建哈希。您可以通过 new 类方法创建一个空的哈希：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">months = Hash.new</span><br></pre></td></tr></table></figure><p><strong>赋值</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mh=&#123;<span class="string">'a'</span>=&gt;<span class="string">'apple'</span>,<span class="string">'b'</span>=&gt;<span class="string">'banan'</span>&#125;</span><br><span class="line">mh[<span class="string">'a'</span>]=<span class="string">'thrid'</span></span><br><span class="line">puts mh <span class="comment">#结论 &#123;"a"=&gt;"thrid", "b"=&gt;"banan"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="范围类型"><a href="#范围类型" class="headerlink" title="范围类型"></a><strong>范围类型</strong></h2><p>一个范围表示一个区间。</p><p>范围是通过设置一个开始值和一个结束值来表示。范围可使用 s..e 和 s…e 来构造，或者通过 Range.new 来构造。使用 .. 构造的范围从开始值运行到结束值（包含结束值）。使用 … 构造的范围从开始值运行到结束值（不包含结束值）。当作为一个迭代器使用时，范围会返回序列中的每个值。范围 (1..5) 意味着它包含值 1, 2, 3, 4, 5，范围 (1…5) 意味着它包含值 1, 2, 3, 4 。</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional [<span class="keyword">then</span>]</span><br><span class="line">      code...</span><br><span class="line">[<span class="keyword">elsif</span> conditional [<span class="keyword">then</span>]</span><br><span class="line">      code...]...</span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line">      code...]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>通常我们省略保留字 then 。若想在一行内写出完整的 if 式，则必须以 then 隔开条件式和程式区块。如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if a &#x3D;&#x3D; 4 then a &#x3D; 7 end</span><br></pre></td></tr></table></figure><p>实例代码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">2</span></span><br><span class="line">   puts <span class="string">"x 大于 2"</span></span><br><span class="line"><span class="keyword">elsif</span> x &lt;= <span class="number">2</span> <span class="keyword">and</span> x!=<span class="number">0</span></span><br><span class="line">   puts <span class="string">"x 是 1"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   puts <span class="string">"无法得知 x 的值"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><strong>while语句</strong></p><p>有两种模式的while语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while conditional [do]</span><br><span class="line">   code</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><strong>demo</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>&lt;<span class="number">2</span> <span class="symbol">:</span></span><br><span class="line">  puts <span class="string">"successd"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>until语句</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> conditional [<span class="keyword">do</span>]</span><br><span class="line">   code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable [, variable ...] <span class="keyword">in</span> expression [<span class="keyword">do</span>]</span><br><span class="line">   code</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>先计算表达式得到一个对象，然后针对 <em>expression</em> 中的每个元素分别执行一次 <em>code</em>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span></span><br><span class="line">   puts <span class="string">"局部变量的值为 <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>ruby例子：<a href="https://github.com/inspec/inspec/tree/main/examples" target="_blank" rel="noopener">https://github.com/inspec/inspec/tree/main/examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;Chef-InSpec介绍&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="Linux" scheme="https://blog.wjzhe.ml/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>AWS 注意事项</title>
    <link href="https://blog.wjzhe.ml/2022/04/17/awsnotion/"/>
    <id>https://blog.wjzhe.ml/2022/04/17/awsnotion/</id>
    <published>2022-04-17T16:00:00.000Z</published>
    <updated>2022-04-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建资源"><a href="#创建资源" class="headerlink" title="创建资源"></a>创建资源</h2><h2 id="额度限制"><a href="#额度限制" class="headerlink" title="额度限制"></a>额度限制</h2><p>创建资源需要注意以下要点：</p><p>如果是新账号，则有创建资源的限制，例如新账号可以使用的vcpu是有限制的。</p><p>以vCPU为例，EC2 vCPU 限制提高以 vCPU 值的形式提交。要请求提高，首先确定您的按需实例使用的 vCPU 数量。您可以使用 vCPU 限制计算器衡量您目前对基于 vCPU 的限制使用的 vCPU 数量，以确定要请求的适当服务限制提高。您可以从 vCPU 限制计算器中直接创建服务限制请求。</p><p><strong>解决方式</strong></p><ol><li>登录 <a href="https://console.aws.amazon.com/ec2/" target="_blank" rel="noopener">Amazon EC2 控制台</a>。</li><li>选择您要请求提高 vCPU 的 <a href="https://docs.aws.amazon.com/general/latest/gr/ec2-service.html#ec2_region" target="_blank" rel="noopener">AWS 区域</a>。</li><li>（可选）要查看您已经运行的实例，请从 <strong>EC2 控制面板</strong>的<strong>资源</strong>下选择<strong>正在运行的实例</strong>。</li><li>选择<strong>限制</strong>，然后选择<strong>计算 vCPU 限制</strong>以访问 vCPU 限制计算器。</li><li>选择<strong>添加实例类型</strong>。</li><li>在<strong>实例类型</strong>下，从下拉菜单中选择可用的实例类型。</li><li>在<strong>实例计数</strong>下，输入您想要的新实例（您在步骤 6 中选择的类型）数量。</li><li>根据需要继续添加实例类型。</li><li>查看<strong>限制计算</strong>。如果<strong>新限制</strong>超出<strong>当前限制</strong>，请选择<strong>请求提高限制</strong>以<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#vcpu-limits-request-increase" target="_blank" rel="noopener">提交服务限制提高请求</a>。<strong>新限制</strong>字段中的值是您应请求的 vCPU 量。</li></ol><p><strong>每个服务限额查看</strong></p><p>todo</p><h2 id="EC2启动失败"><a href="#EC2启动失败" class="headerlink" title="EC2启动失败"></a>EC2启动失败</h2><table><thead><tr><th>名称</th><th>链接</th></tr></thead><tbody><tr><td>ec2未能通过两项检查</td><td><a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/ec2-linux-status-check-failure/" target="_blank" rel="noopener">https://aws.amazon.com/tw/premiumsupport/knowledge-center/ec2-linux-status-check-failure/</a></td></tr><tr><td>实例的状态检查和自动恢复</td><td><a href="https://zhuanlan.zhihu.com/p/268762562" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/268762562</a></td></tr><tr><td>常见故障排查</td><td><a href="https://docs.amazonaws.cn/AWSEC2/latest/UserGuide/TroubleshootingInstances.html" target="_blank" rel="noopener">https://docs.amazonaws.cn/AWSEC2/latest/UserGuide/TroubleshootingInstances.html</a></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="备份制度"><a href="#备份制度" class="headerlink" title="备份制度"></a>备份制度</h2><p>创建的资源需要设置备份，备份机制如下所示</p><p><strong>EC2</strong></p><p>EC2需要备份快照机制，分为两种方式：</p><ul><li>环境应用变更，如果需要对应用进行改变，则需要在改变前进行临时的备份快照；</li><li>日常备份机制，根据客户的RTO与RPO选择不同的备份机制<ul><li>如果是分钟级别的RTO，推荐使用AWS Cloudendure</li><li>如果是天级别的RTO，推荐使用EC2自带的生命周期备份机制</li></ul></li></ul><h1 id="创建web应用"><a href="#创建web应用" class="headerlink" title="创建web应用"></a>创建web应用</h1><p><strong>备案问题</strong></p><p>如果使用的是国内的ELB应用，不通的话，可能是因为备案问题。国内的客户需要在aws上在进行一次备案，链接：<a href="https://www.nwcdcloud.cn/icp.pdf" target="_blank" rel="noopener">https://www.nwcdcloud.cn/icp.pdf</a></p><p><strong>ddos攻击</strong></p><p>需要最客户的web应用做一个简单的放ddos攻击。例如每分钟只允许同一个IP访问固定次数</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;创建资源&quot;&gt;&lt;a href=&quot;#创建资源&quot;
        
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="Linux" scheme="https://blog.wjzhe.ml/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 密钥登录</title>
    <link href="https://blog.wjzhe.ml/2022/04/12/pemConnect/"/>
    <id>https://blog.wjzhe.ml/2022/04/12/pemConnect/</id>
    <published>2022-04-12T16:00:00.000Z</published>
    <updated>2022-04-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>创建密钥文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><strong>传输密钥文件</strong></p><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i LocalRoche.pub root@192.168.15.112</span><br></pre></td></tr></table></figure><p>或者直接讲 <code>LocalRoche.pub</code>文件放置于/root/.ssh/目录下的<code>id_rsa.pub</code>文件中，如果该文件中已经存在其他用户公钥，只要追加即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&lt;&lt;EOF</span><br><span class="line">公钥内容</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>修改sshd配置文件</strong></p><p>通过命令已经将公钥文件传递到Linux，之后，则需要修改ssh server的配置文件。配置文件位置在于<code>/etc/ssh/sshd_config</code>，需要修改文件内的以下几行内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes # 开启密钥登入的认证方式</span><br><span class="line">PermitRootLogin yes #此处请留意 root 用户能否通过 SSH 登录，默认为yes：</span><br><span class="line">PasswordAuthentication yes #当我们完成全部设置并以密钥方式登录成功后，可以禁用密码登录。这里我们先不禁用，先允许密码登陆</span><br></pre></td></tr></table></figure><blockquote><p> PS:关键修改参数一些说明（安全等级更高）：</p><p> #禁用root账户登录，非必要，但为了安全性，请配置<br> PermitRootLogin no</p><p> # 是否让 sshd 去检查用户家目录或相关档案的权限数据，<br> # 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。<br> # 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入<br> StrictModes no</p><p> # 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。<br> # 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内<br> RSAAuthentication yes<br> PubkeyAuthentication yes<br> AuthorizedKeysFile   .ssh/authorized_keys</p><p> #有了证书登录了，就禁用密码登录吧，安全要紧<br> PasswordAuthentication no</p></blockquote><p><strong>重启sshd服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart  #最后，重启 SSH 服务：</span><br></pre></td></tr></table></figure><p>查看sshd状态是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd status</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;创建密钥文件&lt;/strong&gt;&lt;/p&gt;
&lt;
        
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.wjzhe.ml/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.wjzhe.ml/tags/Linux/"/>
    
      <category term="Centos" scheme="https://blog.wjzhe.ml/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>AWS ALB负载均衡</title>
    <link href="https://blog.wjzhe.ml/2022/04/05/ALBbalance/"/>
    <id>https://blog.wjzhe.ml/2022/04/05/ALBbalance/</id>
    <published>2022-04-05T16:00:00.000Z</published>
    <updated>2022-04-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ALB负载均衡"><a href="#ALB负载均衡" class="headerlink" title="ALB负载均衡"></a>ALB负载均衡</h1><h2 id="Part1-AWS-ALB介绍"><a href="#Part1-AWS-ALB介绍" class="headerlink" title="Part1 AWS ALB介绍"></a>Part1 AWS ALB介绍</h2><p>ALB全称为Application Load Balancer，是AWS Elastic Load Balancing的一种。</p><p><strong>ALB工作原理</strong><br>Application Load Balancer 在应用程序层正常工作，该层是开放系统互连 (OSI) 模型的第 7 层。负载均衡器收到请求后，将按照优先级顺序评估侦听器规则以确定应用哪个规则，然后从目标组中选择规则操作目标。可以配置侦听器规则，以根据应用程序流量的内容，将请求路由至不同的目标组。每个目标组的路由都是单独进行的，即使某个目标已在多个目标组中注册。可以配置目标组级别使用的路由算法。默认路由算法为轮询路由算法；或者，可以指定最少未完成请求路由算法。</p><p>可以根据需求变化在负载均衡器中添加和删除目标，而不会中断应用程序的整体请求流。Elastic Load Balancing 根据传输到应用程序的流量随时间的变化对负载均衡器进行扩展。Elastic Load Balancing 能够自动扩展来处理绝大部分工作负载。</p><p>您可以配置运行状况检查，这些检查可用来监控注册目标的运行状况，以便负载均衡器只能将请求发送到正常运行的目标。</p><h2 id="Part2-实验内容"><a href="#Part2-实验内容" class="headerlink" title="Part2 实验内容"></a>Part2 实验内容</h2><ul><li>网络环境：VPC设置2个公共子网，要求2个公共子网在不同的可用区，每个公共子网内各有1台EC2，EC2上有一个简单的http服务。</li><li>负载均衡：要求创建一个负载均衡器，实现访问流量分配到2个EC2上。</li><li>路由要求：要求通过域名访问负载均衡器，并且实现https的访问。</li></ul><h2 id="Part3-实验步骤"><a href="#Part3-实验步骤" class="headerlink" title="Part3 实验步骤"></a>Part3 实验步骤</h2><h3 id="1-网络环境搭建"><a href="#1-网络环境搭建" class="headerlink" title="1.网络环境搭建"></a>1.网络环境搭建</h3><p>该部分主要的工作就是在VPC的两个不同可用区的公共子网内创建EC2，并部署http服务。<br>顺序：创建VPC–&gt;创建IGW并关联VPC–&gt;创建子网–&gt;创建安全组–&gt;创建EC2–&gt;部署服务</p><h4 id="1-1-创建VPC，不使用向导的方式创建"><a href="#1-1-创建VPC，不使用向导的方式创建" class="headerlink" title="1.1 创建VPC，不使用向导的方式创建"></a>1.1 创建VPC，不使用向导的方式创建</h4><p>点击“创建VPC”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214053861.png" alt="image-20220405214053861"></p><p>VPC配置</p><ul><li>仅VPC</li><li>名称：my-vpc-02</li><li>IPv4 CIDR：10.0.0.0/22</li></ul><p>点击创建</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214158370.png" alt="image-20220405214158370"></p><h4 id="1-2-创建互联网网关"><a href="#1-2-创建互联网网关" class="headerlink" title="1.2 创建互联网网关"></a>1.2 创建互联网网关</h4><p>点击“创建互联网网关”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214408258.png" alt="image-20220405214408258"></p><p>设置IGW的名称为：my-igw-02，点击创建</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214537236.png" alt="image-20220405214537236"></p><p>将创建的这个互联网网关关联到VPC上</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214645641.png" alt="image-20220405214645641"></p><p>选择创建的这个VPC，点击关联</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214712929.png" alt="image-20220405214712929"></p><p>在路由表页面选中my-vpc-02的路由表，并点击“编辑路由”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405215548240.png" alt="image-20220405215548240"></p><p>增加一条新的路由信息，将IGW加入路由表，点击“保存更改”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405215821313.png" alt="image-20220405215821313"></p><h4 id="1-3-创建子网"><a href="#1-3-创建子网" class="headerlink" title="1.3 创建子网"></a>1.3 创建子网</h4><p>在子网页面选择创建子网</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214829109.png" alt="image-20220405214829109"></p><p>子网的配置信息</p><ul><li>VPC选择my-vpc-02</li><li>子网1<ul><li>名称：my-net2-01</li><li>可用区：us-east-1a</li><li>IPv4 CIDR：10.0.1.0/24</li></ul></li><li>子网2<ul><li>名称：my-net2-02</li><li>可用区：us-east-1b</li><li>IPv4 CIDR：10.0.2.0/24</li></ul></li></ul><p>点击创建</p><p>注：这里设置两个子网的可用区不同</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405214950454.png" alt="image-20220405214950454"></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405215012077.png" alt="image-20220405215012077"></p><h4 id="1-4-创建安全组"><a href="#1-4-创建安全组" class="headerlink" title="1.4 创建安全组"></a>1.4 创建安全组</h4><p>在安全组页面，点击“创建安全组”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405220012731.png" alt="image-20220405220012731"></p><p>安全组配置</p><ul><li><p>名称：my-sg-02</p></li><li><p>描述：open 22 80 443 5000</p></li><li><p>VPC：选则my-vpc-02</p></li><li><p>入站规则</p><ul><li>TCP 22 0.0.0.0/0</li><li>TCP 80 0.0.0.0/0</li><li>TCP 443 0.0.0.0/0</li><li>TCP 5000 0.0.0.0/0</li></ul><p>配置完成之后点击创建</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221347361.png" alt="image-20220405221347361"></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221358408.png" alt="image-20220405221358408"></p></li></ul><h4 id="1-5-创建EC2"><a href="#1-5-创建EC2" class="headerlink" title="1.5 创建EC2"></a>1.5 创建EC2</h4><h5 id="1-5-1-第一台"><a href="#1-5-1-第一台" class="headerlink" title="1.5.1 第一台"></a>1.5.1 第一台</h5><p>点击“启动新实例”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405220624810.png" alt="image-20220405220624810"></p><p>AMI选中centos7</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405220732793.png" alt="image-20220405220732793"></p><p>类型选择含免费套餐的这个，点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405220823711.png" alt="image-20220405220823711"></p><p>EC2的网络配置：</p><ul><li>VPC：my-vpc-02</li><li>子网：us-east-1a</li><li>自动分配公有IP：禁用</li></ul><p>点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405220946235.png" alt="image-20220405220946235"></p><p>添加存储，保持默认，点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221020586.png" alt="image-20220405221020586"></p><p>标签设置，Name：test-net2-01，点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221120138.png" alt="image-20220405221120138"></p><p>安全组配置，选择现有的安全组，选择my-sg-02，点击审核和启动</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221633072.png" alt="image-20220405221633072"></p><p>审核完成之后点击启动</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405221703945.png" alt="image-20220405221703945"></p><p>密钥对，如果没有就新建，输入密钥对的名称；如果有，就使用现有的密钥对。</p><h5 id="1-5-2-第二台"><a href="#1-5-2-第二台" class="headerlink" title="1.5.2 第二台"></a>1.5.2 第二台</h5><p>大部分配置都与第一台相同</p><p>不同的配置如下</p><ul><li>子网设置与第一台不同，子网选择us-east-1b</li></ul><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405222054658.png" alt="image-20220405222054658"></p><ul><li>标签设置为Name：test-net2-02</li></ul><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220405222129756.png" alt="image-20220405222129756"></p><h4 id="1-6-创建弹性IP"><a href="#1-6-创建弹性IP" class="headerlink" title="1.6 创建弹性IP"></a>1.6 创建弹性IP</h4><ol><li>在弹性IP页面，点击“分配弹性IP”</li></ol><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406010756355.png" alt="image-20220406010756355"></p><ol start="2"><li>直接点击分配即可</li></ol><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406010816653.png" alt="image-20220406010816653"></p><ol start="3"><li>将弹性IP分配到刚创建的EC2上</li></ol><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406011312797.png" alt="image-20220406011312797"></p><p>选择对应的EC2，选择IP，点击分配</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406011445860.png" alt="image-20220406011445860"></p><ol start="4"><li>重复1、2、3步骤，给另一个EC2(test-net2-02)也分配弹性IP</li></ol><h3 id="2-EC2部署简单应用"><a href="#2-EC2部署简单应用" class="headerlink" title="2.EC2部署简单应用"></a>2.EC2部署简单应用</h3><p>SSH上EC2，以下均以test-net2-01实例为例进行展示（test-net2-01实例上配置基本相同）</p><p>修改EC2的hostname，一台改成test-net2-01，另一台test-net2-02</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改hostname</span></span><br><span class="line">[centos@ip-10-0-1-59 ~]$ sudo -i</span><br><span class="line">[root@ip-10-0-1-59 ~]<span class="comment"># hostnamectl set-hostname test-net2-01</span></span><br><span class="line">[root@ip-10-0-1-59 ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">[centos@ip-10-0-1-59 ~]$ sudo -i</span><br></pre></td></tr></table></figure><p>安装pip包管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装pip包管理工具</span></span><br><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># yum install -y wget</span></span><br><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span></span><br><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># sudo python get-pip.py</span></span><br><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># pip -V</span></span><br><span class="line">pip 20.3.4 from /usr/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure><p>安装flask模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装flask模块</span></span><br><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># pip install flask</span></span><br></pre></td></tr></table></figure><p>编写脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># vi http_test</span></span><br></pre></td></tr></table></figure><p>将以下内容复制到脚本文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">import</span> socket,json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hostname</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取本机计算机名称</span></span><br><span class="line">    hostname = socket.gethostname()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"hostname"</span>:hostname&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    result = get_hostname()</span><br><span class="line">    <span class="keyword">return</span> Response(json.dumps(result),  mimetype=<span class="string">'application/json'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure><p>保存后退出</p><p>后台运行脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># nohup python http_test &gt; nohup.log 2&gt;&amp;1 &amp;</span></span><br><span class="line">[1] 9315</span><br></pre></td></tr></table></figure><p>测试5000端口上的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># curl 127.0.0.1:5000</span></span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建ALB负载均衡器"><a href="#3-创建ALB负载均衡器" class="headerlink" title="3.创建ALB负载均衡器"></a>3.创建ALB负载均衡器</h3><h4 id="3-1-创建目标组"><a href="#3-1-创建目标组" class="headerlink" title="3.1 创建目标组"></a>3.1 创建目标组</h4><p>在目标群组页面点击“创建目标组”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406014556009.png" alt="image-20220406014556009"></p><p>创建目标组，配置设置</p><ul><li>目标类型：实例</li><li>目标组名称：my-targer-02</li><li>协议：HTTP：5000（<font color=red>！此处不能修改成别的，一定要是HTTP协议</font>）<ul><li>端口为5000，是因为EC2上对应的服务在5000端口</li></ul></li><li>VPC：my-vpc-02</li></ul><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406015522649.png" alt="image-20220406015522649"></p><p>点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406015535658.png" alt="image-20220406015535658"></p><p>将两个实例添加为目标，点击创建目标组</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406015820921.png" alt="image-20220406015820921"></p><h4 id="3-2-创建ALB负载均衡器"><a href="#3-2-创建ALB负载均衡器" class="headerlink" title="3.2 创建ALB负载均衡器"></a>3.2 创建ALB负载均衡器</h4><p>在负载均衡器页面，点击“新建负载均衡器”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406014046173.png" alt="image-20220406014046173"></p><p>选择“Application Load Balancer”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406014124888.png" alt="image-20220406014124888"></p><p>ALB配置</p><ul><li>名称：my-alb-02</li><li>VPC：my-vpc-02</li><li>映射：选择有公共子网的可用区，选好可用区之后选择子网</li><li>安全组：选择创建的my-sg-02</li><li>侦听器和路由：创建2个侦听器，分别是80和5000端口，流量转发至my-target-02</li></ul><p>配置完成之后，点击创建负载均衡器</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406020101041.png" alt="image-20220406020101041"></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406020144666.png" alt="image-20220406020144666"></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406020221584.png" alt="image-20220406020221584"></p><p><img src="images-ALB%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/image-20220406020501241.png" alt="image-20220406020501241"></p><p>负载均衡器需要一定的配置时间，等待10分钟左右会创建完成</p><h4 id="3-3-ALB测试"><a href="#3-3-ALB测试" class="headerlink" title="3.3 ALB测试"></a>3.3 ALB测试</h4><p>复制负载均衡器my-alb-02的DNS名称</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406021530401.png" alt="image-20220406021530401"></p><p>在终端进行访问，可以看到有在进行负载均衡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># for i in $(seq 1 10); do curl http://my-alb-02-126796059.us-east-1.elb.amazonaws.com/ &amp;&amp;echo ""; done</span></span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406021612612.png" alt="image-20220406021612612"></p><h3 id="4-域名解析"><a href="#4-域名解析" class="headerlink" title="4.域名解析"></a>4.域名解析</h3><h4 id="4-1-获得免费域名"><a href="#4-1-获得免费域名" class="headerlink" title="4.1 获得免费域名"></a>4.1 获得免费域名</h4><p>获取途径<a href="https://my.freenom.com/clientarea.php" target="_blank" rel="noopener">Freenom</a></p><p>本次实验使用的域名是modu2022.cf</p><h4 id="4-2-Route-53-创建域"><a href="#4-2-Route-53-创建域" class="headerlink" title="4.2 Route 53 创建域"></a>4.2 Route 53 创建域</h4><h5 id="4-2-1-创建托管区域"><a href="#4-2-1-创建托管区域" class="headerlink" title="4.2.1 创建托管区域"></a>4.2.1 创建托管区域</h5><p>在Route 53的托管区域页面，点击“创建托管区域”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022118864.png" alt="image-20220406022118864"></p><p>填入域名：modu2022.cf</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022005423.png" alt="image-20220406022005423"></p><h5 id="4-2-2-修改域名的名称服务器"><a href="#4-2-2-修改域名的名称服务器" class="headerlink" title="4.2.2 修改域名的名称服务器"></a>4.2.2 修改域名的名称服务器</h5><p>记录下托管区域modu2022.cf的名称服务器</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022356427.png" alt="image-20220406022356427"></p><p>将Freenom中对应域名的名称服务器改为上面的4个服务器</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022529216.png" alt="image-20220406022529216"></p><h5 id="4-2-3-创建记录"><a href="#4-2-3-创建记录" class="headerlink" title="4.2.3 创建记录"></a>4.2.3 创建记录</h5><p>点击“创建记录”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022740304.png" alt="image-20220406022740304"></p><p>创建2条记录</p><p>记录1和记录2除了“记录名称”之外的地方都一致</p><p>记录1：</p><ul><li>类型：A</li><li>流量路由至：别名<ul><li>选择Application和Classic Load Balancer的别名</li><li>选择美国东部us-east-1</li><li>选择创建的alb-02</li></ul></li></ul><p>点击“创建记录”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406022843968.png" alt="image-20220406022843968"></p><h4 id="4-3-域名测试"><a href="#4-3-域名测试" class="headerlink" title="4.3 域名测试"></a>4.3 域名测试</h4><p>可以使用域名访问服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># for i in $(seq 1 10); do curl http://modu2022.cf &amp;&amp;echo ""; done</span></span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406023531357.png" alt="image-20220406023531357"></p><h3 id="5-HTTPS访问"><a href="#5-HTTPS访问" class="headerlink" title="5.HTTPS访问"></a>5.HTTPS访问</h3><h4 id="5-1-创建证书"><a href="#5-1-创建证书" class="headerlink" title="5.1 创建证书"></a>5.1 创建证书</h4><p>使用AWS的ACM证书托管服务创建SSL证书</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406023739857.png" alt="image-20220406023739857"></p><p>请求证书，点击下一步</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406023804895.png" alt="image-20220406023804895"></p><p>填入域名，设置标签</p><ul><li>域名：modu2022.cf</li><li>标签：Name：modu2022.cf</li></ul><p>点击请求</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406023922000.png" alt="image-20220406023922000"></p><p>点击证书的链接，进入到证书设置中去</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406024015520.png" alt="image-20220406024015520"></p><p>点击“在Route 53中创建记录”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406024043744.png" alt="image-20220406024043744"></p><p>点击“创建记录”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406024105623.png" alt="image-20220406024105623"></p><p>证书的状态为”已颁发”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406024244882.png" alt="image-20220406024244882"></p><h4 id="5-2-ALB添加侦听器"><a href="#5-2-ALB添加侦听器" class="headerlink" title="5.2 ALB添加侦听器"></a>5.2 ALB添加侦听器</h4><p>给my-alb-02新增侦听内容</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406024401239.png" alt="image-20220406024401239"></p><p>侦听设置</p><ul><li>HTTPS协议，443端口</li><li>操作：转发至</li><li>目标组：my-target-02</li><li>安全侦听器设置<ul><li>安全策略：默认</li><li>SSL证书：选择创建的证书modu2022.cf</li></ul></li></ul><p>配置完成之后点击“添加”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406104955591.png" alt="image-20220406104955591"></p><h4 id="5-3-访问测试"><a href="#5-3-访问测试" class="headerlink" title="5.3 访问测试"></a>5.3 访问测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-01 ~]<span class="comment"># for i in $(seq 1 10); do curl https://modu2022.cf &amp;&amp;echo ""; done</span></span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220406110211724.png" alt="image-20220406110211724"></p><p>测试完成之后可以将2台EC2的弹性IP释放掉。</p><h3 id="HTTPS访问（自建证书）"><a href="#HTTPS访问（自建证书）" class="headerlink" title="HTTPS访问（自建证书）"></a>HTTPS访问（自建证书）</h3><h4 id="申请免费证书"><a href="#申请免费证书" class="headerlink" title="申请免费证书"></a>申请免费证书</h4><p>笔者申请腾讯云的免费证书。</p><p>在搜索框输入“SSL证书”，进入“我的证书”页面，点击“申请免费证书”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220407155954040.png" alt="image-20220407155954040"></p><p>选择证书类型，保持默认就行，点击“确定”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220407160119701.png" alt="image-20220407160119701"></p><p>“提交资料”这一步只需要按照要求填写内容即可，点击“下一步”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220407160315832.png" alt="image-20220407160315832"></p><p>验证方式选择推荐的DNS验证，点击“下一步”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220407160409715.png" alt="image-20220407160409715"></p><p>将腾讯云上域名验证的部分，添加到托管的记录中</p><p>在托管域中新增一条CNAME类型的记录，把名称和值都填进去，点击创建记录</p><p>记录创建完成之后，在腾讯云平台上进行域名验证</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220407203509147.png" alt="image-20220407203509147"></p><p>等待证书颁发，过程可能需要2个小时</p><p>okay，证书颁发完整之后，下载证书</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408111659212.png" alt="image-20220408111659212"></p><p>选择Nginx类型，下载</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408112122014.png" alt="image-20220408112122014"></p><h4 id="在ACM中导入证书"><a href="#在ACM中导入证书" class="headerlink" title="在ACM中导入证书"></a>在ACM中导入证书</h4><p>在ACM页面中选择，导入证书</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408113215099.png" alt="image-20220408113215099"></p><p>将下载下来证书的对应内容复制进去</p><p>填写规则：</p><ul><li>对于 <strong>Certificate body</strong>（证书正文），粘贴要导入的 PEM 编码证书。它应以 <code>-----BEGIN CERTIFICATE-----</code> 开头并以 <code>-----END CERTIFICATE-----</code> 结尾。</li><li>对于 <strong>Certificate private key（证书私有密钥）</strong>，粘贴证书的 PEM 编码的未加密私有密钥。它应以 <code>-----BEGIN PRIVATE KEY-----</code> 开头并以 <code>-----END PRIVATE KEY-----</code> 结尾。</li><li>(可选) 对于 <strong>Certificate chain (证书链)</strong>，粘贴 PEM 编码的证书链。</li></ul><p>导入之后，点击“下一步”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408113452118.png" alt="image-20220408113452118"></p><p>为证书添加标签，Name:modu2022.cg_SSL。标签不添加也可以。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408113709930.png" alt="image-20220408113709930"></p><p>审核完成之后点击导入</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408113752537.png" alt="image-20220408113752537"></p><p>证书导入完毕</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408115936587.png" alt="image-20220408115936587"></p><h4 id="修改负载均衡器"><a href="#修改负载均衡器" class="headerlink" title="修改负载均衡器"></a>修改负载均衡器</h4><p>在负载均衡器中添加侦听器</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220408111521838.png" alt="image-20220408111521838"></p><p>侦听器内容设置如下</p><ul><li>协议：HTTPS 443端口</li><li>操作：转发<ul><li>目标组：my-target-02</li></ul></li><li>侦听器证书设置：“从ACM中”，选择新增的modu2022.cf证书</li></ul><p>点击添加</p><p>测试访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>-net2-02 ~]<span class="comment"># for i in $(seq 1 10); do curl https://modu2022.cf &amp;&amp;echo ""; done</span></span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-02"</span>&#125;</span><br><span class="line">&#123;<span class="string">"hostname"</span>: <span class="string">"test-net2-01"</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="images-ALB%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%5Cimage-20220408121453351.png" alt="image-20220408121453351"></p><p>okay，自建证书也实现了ALB的负载均衡。</p><h2 id="Part4-问题总结"><a href="#Part4-问题总结" class="headerlink" title="Part4 问题总结"></a>Part4 问题总结</h2><ol><li><p>part3的3.1目标组配置的协议要是HTTP协议的5000端口。因为创建的ALB是对7层的流量进行负载均衡，所以协议要选择是7层协议。如果创建NLB，那么协议选择TCP的5000端口。</p></li><li><p>part3的5.2部分添加侦听器时的协议要选择HTTPS协议的443端口。</p><p>注意：HTTP协议的443端口和HTTPS协议的443端口不是同一个。</p></li></ol><h2 id="Part5-参考文献"><a href="#Part5-参考文献" class="headerlink" title="Part5 参考文献"></a>Part5 参考文献</h2><p><a href="https://docs.aws.amazon.com/zh_cn/elasticloadbalancing/latest/application/introduction.html" target="_blank" rel="noopener">AWS Application Load Balancer用户指南</a></p><p><a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/migrate-dns-domain-inactive.html" target="_blank" rel="noopener">将Route 53作为非活动域的DNS服务</a></p><p><a href="https://blog.csdn.net/kingov/article/details/101696040" target="_blank" rel="noopener">亚马逊云服务器AWS配置ssl https证书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;ALB负载均衡&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="转载" scheme="https://blog.wjzhe.ml/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="AWS Network" scheme="https://blog.wjzhe.ml/tags/AWS-Network/"/>
    
      <category term="转载 张小燕" scheme="https://blog.wjzhe.ml/tags/%E8%BD%AC%E8%BD%BD-%E5%BC%A0%E5%B0%8F%E7%87%95/"/>
    
  </entry>
  
  <entry>
    <title>AWS Organizations账户管理服务&amp;SCP</title>
    <link href="https://blog.wjzhe.ml/2022/04/05/AWSOrganizations/"/>
    <id>https://blog.wjzhe.ml/2022/04/05/AWSOrganizations/</id>
    <published>2022-04-05T16:00:00.000Z</published>
    <updated>2022-04-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-Organizations账户管理服务-amp-SCP"><a href="#AWS-Organizations账户管理服务-amp-SCP" class="headerlink" title="AWS Organizations账户管理服务&amp;SCP"></a>AWS Organizations账户管理服务&amp;SCP</h1><h2 id="Part1-介绍AWS-Organizations"><a href="#Part1-介绍AWS-Organizations" class="headerlink" title="Part1 介绍AWS Organizations"></a>Part1 介绍AWS Organizations</h2><p>AWS Organizations 是一项账户管理服务，使您能够将多个AWS 账户整合到您创建并集中管理的组织中。AWS Organizations 包含账户管理和整合账单功能，可利用这些功能更好地满足企业的预算、安全性和合规性需求。作为组织的管理员，您可以在组织中创建账户并邀请现有账户加入组织。</p><p><strong>AWS Organizations功能</strong></p><ul><li>集中管理您的所有AWS账户</li><li>所有成员账户的整合账单</li><li>对账户进行分层分组以满足预算、安全性或合规性需求</li><li>集中控制每个账户可访问的AWS服务和API操作的策略</li><li>帮助在组织账户中跨资源标准化标签的策略</li><li>控制AWS AI和机器学习服务可以手机和存储数据的策略</li><li>为组织账户中的资源配置自动备份的策略</li><li>针对AWS IAM的集成和支持</li><li>与其他AWS服务集成</li><li>全局访问</li><li>具备最终一致性的数据复制</li><li>免费使用</li></ul><h2 id="Part2-实验场景"><a href="#Part2-实验场景" class="headerlink" title="Part2 实验场景"></a>Part2 实验场景</h2><p>前提条件：需要2个账户，称作Account A和Account B。</p><p>描述：在Account A中创建组织，并邀请Account B加入组织。在Account A中设置策略来防止Account B访问S3，在Account B上进行测试。</p><p>说明：本实验demo的Account A的ID尾号为5283，Account B的ID尾号为8124</p><h2 id="Part3-实验步骤"><a href="#Part3-实验步骤" class="headerlink" title="Part3 实验步骤"></a>Part3 实验步骤</h2><h3 id="3-1-实验账户说明"><a href="#3-1-实验账户说明" class="headerlink" title="3.1 实验账户说明"></a>3.1 实验账户说明</h3><p>本实验demo的Account A的ID尾号为5283，Account B的ID尾号为8124</p><p>实验会在Account A账户中创建组织，即Account A是主账户，Account B是成员账户。</p><h3 id="3-2-创建组织"><a href="#3-2-创建组织" class="headerlink" title="3.2 创建组织"></a>3.2 创建组织</h3><p>在Account A账户中创建组织。在Organization主页，点击“创建组织”。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412004932107.png" alt="image-20220412004932107"></p><p>点击之后直接就能创建组织，创建组织需要邮箱验证。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412005002268.png" alt="image-20220412005002268"></p><h3 id="3-3-邀请账户"><a href="#3-3-邀请账户" class="headerlink" title="3.3 邀请账户"></a>3.3 邀请账户</h3><p>输入账户ID和要创建的键值，点击发送邀请。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412011458396.png" alt="image-20220412011458396"></p><p>在Account B中可以看到邀请</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412011633785.png" alt="image-20220412011633785"></p><p>点开邀请链接之后，接受邀请</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412011714385.png" alt="image-20220412011714385"></p><p>在Account A上查看组织的账户，一个主账户，一个成员账户</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412011914453.png" alt="image-20220412011914453"></p><h3 id="3-4-创建S3策略"><a href="#3-4-创建S3策略" class="headerlink" title="3.4 创建S3策略"></a>3.4 创建S3策略</h3><p>进入策略页面，点击“服务控制策略”</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412102406807.png" alt="image-20220412102406807"></p><p>启用服务控制策略</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412102431828.png" alt="image-20220412102431828"></p><p>加载完成之后，如下所示</p><p>新创建一个策略，来阻止对S3的访问，点击创建策略</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412102504986.png" alt="image-20220412102504986"></p><p>策略设置</p><ul><li>名称：denyS3</li><li>选择服务：S3，动作：All Actions</li></ul><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412103202634.png" alt="image-20220412103202634"></p><p>添加资源，添加完成之后点击创建策略</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412132453499.png" alt="image-20220412132453499"></p><h3 id="3-5-前-Account-B访问S3测试"><a href="#3-5-前-Account-B访问S3测试" class="headerlink" title="3.5 [前]Account B访问S3测试"></a>3.5 [前]Account B访问S3测试</h3><p>目前没有给Account B账户做任何限制，Account B可以正常访问S3存储桶</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412133347888.png" alt="image-20220412133347888"></p><h3 id="3-6-将策略应用到Account-B"><a href="#3-6-将策略应用到Account-B" class="headerlink" title="3.6 将策略应用到Account B"></a>3.6 将策略应用到Account B</h3><p>在Account A账户的Organizations中，将denyS3策略附加到Account B</p><p>选中denyS3策略，点击操作。点击附加策略</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412133545337.png" alt="image-20220412133545337"></p><p>选中要附加的这个账户，点击附加策略</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412133640477.png" alt="image-20220412133640477"></p><p>Okay，策略附加成功</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412133717996.png" alt="image-20220412133717996"></p><h3 id="3-7-后-Account-B访问S3测试"><a href="#3-7-后-Account-B访问S3测试" class="headerlink" title="3.7 [后]Account B访问S3测试"></a>3.7 [后]Account B访问S3测试</h3><p>Account A为Account B添加了限制S3所有权限的策略，现在Account B账户上访问S3进行测试。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20220412133938873.png" alt="image-20220412133938873"></p><p>Account B再次访问S3时出现提示：无权列出存储桶。所以可以看出策略附加成功，在Account B上已经生效。</p><p>总结：本实验是一个简单的AWS Organizations创建以及测试，主要测试的服务控制策略SCP。Organizations还有很多别的功能。</p><h2 id="Part4-参考文献"><a href="#Part4-参考文献" class="headerlink" title="Part4 参考文献"></a>Part4 参考文献</h2><ul><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/organizations/latest/userguide/orgs_introduction.html" target="_blank" rel="noopener">什么是AWS Organizations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1
        
      
    
    </summary>
    
    
      <category term="转载" scheme="https://blog.wjzhe.ml/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="转载 张小燕" scheme="https://blog.wjzhe.ml/tags/%E8%BD%AC%E8%BD%BD-%E5%BC%A0%E5%B0%8F%E7%87%95/"/>
    
      <category term="Organizations" scheme="https://blog.wjzhe.ml/tags/Organizations/"/>
    
      <category term="IAM" scheme="https://blog.wjzhe.ml/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>EC2安装CloudWatch Agent自定义监控指标</title>
    <link href="https://blog.wjzhe.ml/2022/03/24/installCloudwathagent/"/>
    <id>https://blog.wjzhe.ml/2022/03/24/installCloudwathagent/</id>
    <published>2022-03-24T16:00:00.000Z</published>
    <updated>2022-03-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Amazon CloudWatch是一项针对AWS上运行的应用程序的监控服务。使用Amazon CloudWatch可以收集和跟中指标、收集和监控日志文件以及设置警报。Amazon CloudWatch可以监控各种AWS资源，例如Amazon EC2实例、Amazon DynamoDB表、Amazon RDS数据库实例、应用程序和服务生成的自定义指标以及应用程序生成的所有日志文件。</p></blockquote><p>随着业务需求越来越大，客户需要进步详细的监控某些资源的使用情况，比如需要监控EC2内存的总量和使用情况进行监控，默认情况下，CloudWatch是没有对这些指标进行监控的，因为内存属于用户操作系统内的信息，在AWS的产品设计中，所有系统内的信息都属于用户的私有财产和信息。所以默认情况下，AWS的CloudWatch不收集相关信息。但在实际使用的项目中，以内存监控为代表的系统、应用层面的监控是系统监控中非常重要的一环，所以AWS CloudWatch Agent来帮助用户监控EC2实例中的更多的系统层面的信息，如：内存、CPU、Disk、Network等信息。同时通过CloudWatch Agent还可以对系统中的各种日志进行统一的收集并存放至CloudWatch Log中，方便用户后续的分析等操作。</p><p><strong>本文档主要指引如何为EC2实例安装cloudwatch agent自定义监控指标，监控内存使用率、磁盘使用率等</strong></p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><strong>前期准备</strong></h2><ul><li>创建好自己的VPC；</li><li>启动一台EC2；</li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h1><h2 id="EC2附加具有相应策略的角色"><a href="#EC2附加具有相应策略的角色" class="headerlink" title="EC2附加具有相应策略的角色"></a><strong>EC2附加具有相应策略的角色</strong></h2><h3 id="登录到AWS-控制台-创建IAM角色"><a href="#登录到AWS-控制台-创建IAM角色" class="headerlink" title="登录到AWS 控制台 创建IAM角色"></a><strong>登录到AWS 控制台 创建IAM角色</strong></h3><p>登入亚马逊控制台,点击上方Services,搜索IAM</p><p><em>如下图 红圈处1</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggOTSkAYoqLf9ggQw0gc4tgM.png" alt=" "></p><p><strong>1.左边导航栏选中”角色” -</strong> <em>如下图 红圈1</em></p><p><strong>2.点击上方“创建角色” -</strong> <em>如下图 红圈2</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggOTSkAYo9qr6QDDSBzioAw.png" alt=" "></p><p><strong>3.在”可信实体类型”选择”亚马逊服务”</strong> <em>如下图 红圈处1</em></p><p><strong>4.选择”EC2”点击 -</strong> <em>如下图 红圈2</em></p><p><strong>5.点击右下角”下一步” -</strong> <em>如下图 红圈3</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggOTSkAYojpGvoQYw0gc47gQ.png" alt=" "></p><p><strong>6.在红框内搜索策略Cloudwatchagent</strong></p><p><img src="https://22252606.s21i.faiusr.com/4/ABUIABAEGAAggOTSkAYostyYEzDSBziqAw.png" alt=" "></p><p><strong>7.选择添加</strong>CloudWatchAgentServerPolicy<strong>和</strong>CloudWatchAgentAdminPolicy<strong>策略,点击”下一步”</strong></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggOTSkAYosKXu6gYw0gc4sgM.png" alt=" "></p><p><strong>8.给角色起一个名称，这里是”Ec2-Cloudwatchagent” -</strong> <em>如下图 红圈1</em></p><p><strong>9.点击”创建角色” -</strong> <em>如下图 红圈2</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYo0KOyxwQw3AY4vgY.png" alt=" "></p><p><strong>角色创建完成</strong></p><h2 id="将该角色附加到EC2"><a href="#将该角色附加到EC2" class="headerlink" title="将该角色附加到EC2"></a><strong>将该角色附加到EC2</strong></h2><p><strong>1.在控制台打开EC2服务，选择右边”实例”</strong></p><p><em>如下图 红圈1</em></p><p><strong>2.选择需要监控的EC2实例 -</strong> <em>如下图 红圈2</em></p><p><strong>3.点击操作按钮 -</strong> <em>如下图 红圈3</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYogOSngAUw0gc41AM.png" alt=" "></p><p><strong>4.点击”安全” -</strong> <em>如下图 红圈1</em></p><p><strong>5.点击”修改IAM角色”选择 -</strong> <em>如下图 红圈2</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYo86b75wQwkgU46AM.png" alt=" "></p><p><strong>6.选择刚才创建的IAM角色，点击保存，这样就把有相关权限的角色附加到EC2实例，前期准备工作完成。</strong></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYosO_5jQQw0gc4nAQ.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYo3t7kxQMw0gc4ngQ.png" alt=" "></p><h2 id="安装CloudWatchAgent代理"><a href="#安装CloudWatchAgent代理" class="headerlink" title="安装CloudWatchAgent代理"></a><strong>安装CloudWatchAgent代理</strong></h2><blockquote><p>登录到EC2实例,安装和配置CloudWatchAgent</p></blockquote><p><strong>输入命令sudo yum update，更新实例</strong></p><p><em>如下图 红圈处1</em></p><p><strong>2.输入以下命令,下载cloudwatch代理软件包</strong></p><p><em>如下图 红圈处2</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYokLLJ4gcw0gc45AQ.png" alt=" "></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wegt - https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;amazoncloudwatch-agent&#x2F;amazon_linux&#x2F;amd64&#x2F;latest&#x2F;amazon-cloudwatch-agent.rpm</span><br></pre></td></tr></table></figure><p><strong>3.输入命令 sudo rpm -U ./amazon-cloudwatch-agent.rpm安装软件包。</strong></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYonJH8pgYw0gc41AE.png" alt=" "></p><p><strong>4.输入以下命令进入到目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYo_-zTlAEw-AY4pAE.png" alt=" "></p><p><strong>5.手动创建或编辑cloudwatch代理配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim amazon-cloudwatch-agent.json</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAggeTSkAYo4POGyQQwxgY4Og.png" alt=" "></p><p><strong>6.编辑Cloudwatch代理配置文件（配置文件链接已附上，需要请在最下面提取），其中“metrics”模块为监控指标</strong></p><p><strong>7.保存并推出。</strong></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYolLD1aDDSBzioBQ.png" alt=" "></p><p><strong>8.依次输入红圈处的命令,将刚创建的json文件复制移动到doc目录下,并将原先doc目录下”amazon-cloudwatch-agent-schema.json”文件删除,重命名amazon-cloudwatch-agent.json为amazon-cloudwatch-agent-schema.json</strong></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYo-K69ywQw0gc48AE.png" alt=" "></p><p><strong>9.输入以下命令，启动CloudWatchAgent</strong></p><p><em>如下图 红圈处</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;bin&#x2F;amazon-cloudwatch-agent-ctl-a fetch-config-m ec2-s-c file:&#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;doc&#x2F;amazon-cloudwatch-agent-schema.json</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYoxuXW_wQw0gc4vgE.png" alt=" "></p><p><strong>10.输入以下命令，检查是否启动成功</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;bin&#x2F;amazon-cloudwatch-agent-ctl -m ec2 -a status</span><br></pre></td></tr></table></figure><p><strong>11.看到”status”:”running”，表示启动成功</strong></p><p><em>如下图 红圈处</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYoysPPoAcw0gc43gE.png" alt=" "></p><h2 id="查看监控情况"><a href="#查看监控情况" class="headerlink" title="查看监控情况"></a><strong>查看监控情况</strong></h2><blockquote><p><strong>登录cloudwatch控制台，查看监控指标</strong></p></blockquote><p><strong>1.先打开EC2服务，复制EC2的实例ID</strong></p><p><strong>2.搜索服务cloudwatch</strong>  <em>如图红圈1处</em></p><p><strong>3.在打开的页面点击“全部指标”</strong> <em>如图红圈2处</em></p><p><strong>4.在“指标”信息栏搜索框处，输入刚才的EC2实例ID</strong> <em>如图红圈处3</em></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYo1J2HiAcwhAc4kAU.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYoovKK4wIw0gc4gAQ.png.webp" alt=" "></p><p>5.到这里，我们就可以根据需要，选择查看各指标监控情况。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYo0Oe_5QMw0gc42gM.png.webp" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYo_LiQeTDSBzj8AQ.png.webp" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgguTSkAYorozjxQMw0gc47AM.png.webp" alt=" "></p><p>可以看到服务了。</p><p><strong>转载地址:<a href="https://www.ecloudrover.com/h-nd-180.html#_np=21_2595" target="_blank" rel="noopener">https://www.ecloudrover.com/h-nd-180.html#_np=21_2595</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Amazon
        
      
    
    </summary>
    
    
      <category term="Cloudwatch" scheme="https://blog.wjzhe.ml/categories/Cloudwatch/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="转载" scheme="https://blog.wjzhe.ml/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>创建ec2使用的iam</title>
    <link href="https://blog.wjzhe.ml/2022/03/24/installCloudwathagentbywjshuai/"/>
    <id>https://blog.wjzhe.ml/2022/03/24/installCloudwathagentbywjshuai/</id>
    <published>2022-03-24T16:00:00.000Z</published>
    <updated>2022-03-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建ec2使用的iam"><a href="#创建ec2使用的iam" class="headerlink" title="创建ec2使用的iam"></a>创建ec2使用的iam</h1><p><strong>选择iam</strong></p><p><img src="img/image-20220325121800389.png" alt="image-20220325121800389"></p><p><strong>选择策略</strong></p><p>输入<code>Cloudwatchagent</code>,选中<strong>CloudWatchAgentAdminPolicy</strong>与<strong>CloudWatchAgentServerPolicy</strong></p><p><img src="img/image-20220325121855992.png" alt="image-20220325121855992"></p><p><strong>名称填写</strong></p><p>填写<code>Ec2Cloudwatchagent</code></p><p><img src="img/image-20220325122003638.png" alt="image-20220325122003638"></p><p>点击创建角色</p><h1 id="将角色附加到ec2"><a href="#将角色附加到ec2" class="headerlink" title="将角色附加到ec2"></a><strong>将角色附加到ec2</strong></h1><p><img src="img/image-20220325122108264.png" alt="image-20220325122108264"></p><p><strong>选择之前创建的角色</strong></p><p><img src="img/image-20220325122137024.png" alt="image-20220325122137024"></p><h1 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h1><p><strong>安装代理工具</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install amazon-cloudwatch-agent -y</span><br></pre></td></tr></table></figure><p>安装成功</p><p><img src="img/image-20220325122323900.png" alt="image-20220325122323900"></p><p><strong>编写metric配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure><p><img src="img/image-20220325122504757.png" alt="image-20220325122504757"></p><p>写入配置内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;opt&#x2F;aws&#x2F;amazon-cloudwatch-agent&#x2F;bin&#x2F;nspconfig.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;agent&quot;: &#123;</span><br><span class="line">&quot;metrics_collection_interval&quot;: 60,</span><br><span class="line">&quot;run_as_user&quot;: &quot;root&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;metrics&quot;: &#123;</span><br><span class="line">&quot;namespace&quot;: &quot;NSP&#x2F;EC2&quot;,</span><br><span class="line">&quot;metrics_collected&quot;: &#123;</span><br><span class="line">&quot;collectd&quot;: &#123;</span><br><span class="line">&quot;metrics_aggregation_interval&quot;: 60</span><br><span class="line">&#125;,</span><br><span class="line">&quot;disk&quot;: &#123;</span><br><span class="line">&quot;drop_device&quot;: true,</span><br><span class="line">&quot;ignore_file_system_types&quot;: [</span><br><span class="line">&quot;sysfs&quot;,</span><br><span class="line">&quot;tmpfs&quot;,</span><br><span class="line">&quot;devtmpfs&quot;</span><br><span class="line">],</span><br><span class="line">&quot;measurement&quot;: [</span><br><span class="line">&quot;free&quot;,</span><br><span class="line">&quot;used_percent&quot;</span><br><span class="line">],</span><br><span class="line">&quot;metrics_collection_interval&quot;: 60,</span><br><span class="line">&quot;resources&quot;: [</span><br><span class="line">&quot;*&quot;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;diskio&quot;: &#123;</span><br><span class="line">&quot;measurement&quot;: [</span><br><span class="line">&quot;read_bytes&quot;,</span><br><span class="line">&quot;write_bytes&quot;</span><br><span class="line">],</span><br><span class="line">&quot;metrics_collection_interval&quot;: 60,</span><br><span class="line">&quot;resources&quot;: [</span><br><span class="line">&quot;*&quot;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&quot;mem&quot;: &#123;</span><br><span class="line">&quot;measurement&quot;: [</span><br><span class="line">&quot;mem_used_percent&quot;</span><br><span class="line">],</span><br><span class="line">&quot;metrics_collection_interval&quot;: 60,</span><br><span class="line">&quot;resources&quot;: [</span><br><span class="line">&quot;*&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;append_dimensions&quot;: &#123;</span><br><span class="line">&quot;InstanceId&quot;: &quot;$&#123;aws:InstanceId&#125;&quot;,</span><br><span class="line">&quot;InstanceType&quot;: &quot;$&#123;aws:InstanceType&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;创建ec2使用的iam&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>S3 跨账号复制</title>
    <link href="https://blog.wjzhe.ml/2022/03/09/MigrateOfS3/"/>
    <id>https://blog.wjzhe.ml/2022/03/09/MigrateOfS3/</id>
    <published>2022-03-09T16:00:00.000Z</published>
    <updated>2022-03-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景背景"><a href="#场景背景" class="headerlink" title="场景背景"></a>场景背景</h1><p>公司业务中可能涉及到内部账号之间数据的迁移，那么如何迁移整个 S3 中的数据到另外一个账户可能困扰着我们。今天我们就要教大家怎么实现跨账号的 S3 数据迁移，请准备两个Amazon Web Services 账户，一起开启数据迁移之旅。</p><p>要确保目标账户拥有从另一个账户复制 S3 的对象，请授予目标账户拥有跨账户复制的权限。大致按照以下步骤配置跨账户权限，将对象从账户 A 中的源存储桶复制到账户 B 中的目标存储桶：</p><ul><li>将 <strong>存储桶策略</strong> 附加到账户 A 中的源存储桶。</li><li>将 <strong>Amazon IAM 策略</strong> 附加到账户 B 中的目标用户。</li><li>使用目标账户 B 中的 IAM 用户执行跨账户复制。</li><li>整个存储桶迁移的过程就是从A存储桶迁移到B存储桶的过程</li></ul><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgs7LZ-QUojumZxAMwxgU4wQI.png" alt=" "></p><h1 id="步骤一：创建A存储桶"><a href="#步骤一：创建A存储桶" class="headerlink" title="步骤一：创建A存储桶"></a>步骤一：创建A存储桶</h1><p><strong>在账户 A 中创建 S3 存储桶。</strong></p><p>登录账号 A， 点击 <strong>服务</strong>，进入 S3 服务控制台，并选择 <strong>创建存储桶</strong>。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgzrLZ-QUo8LPEwgYw3gY49QM.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAg3rLZ-QUo4PO5owQwyAY4kAI.png" alt=" "></p><p>接着，设定存储桶的相关配置：</p><ul><li>存储桶名称：请根据需要自行创建一个<strong>全球唯一的存储桶名称</strong>；</li><li>区域：请根据需要自行选择；</li></ul><p>其他配置保持默认，选择创建存储桶；</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAg7rLZ-QUoiJXR2AIwyAY4zgc.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAg_LLZ-QUooNz02QYwyAY4sQI.png" alt=" "></p><h1 id="步骤二：A存储桶策略添加"><a href="#步骤二：A存储桶策略添加" class="headerlink" title="步骤二：A存储桶策略添加"></a>步骤二：A存储桶策略添加</h1><p>选择第一步创建的 S3 存储桶，选择 <strong>权限</strong>，向下滚动，找到 <strong>存储桶策略</strong>，点击 <strong>编辑</strong>。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgjLPZ-QUo5vW4wgcwyAY4hAc.png" alt=" "></p><p>将以下存储桶策略复制进去，并修改以下相关配置：</p><p><strong>arn:aws:iam::11111111111:user/s3-demo</strong> 替换为<strong>账户 B 中 IAM 用户的 ARN</strong>；</p><p><strong>sourcebucketname</strong> 替换为<strong>在账号 A 中创建的 S3 存储桶名称；</strong></p><p>其他配置保留默认。</p><p><strong>Global区域</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;DelegateS3Access&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &#123;</span><br><span class="line">                &quot;AWS&quot;: &quot;arn:aws:iam::11111111111:user&#x2F;s3-demo&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:GetObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::source_bucket_name&#x2F;*&quot;,</span><br><span class="line">                &quot;arn:aws:s3:::source_bucket_name&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中国区域</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;DelegateS3Access&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &#123;</span><br><span class="line">                 &quot;AWS&quot;: &quot;arn:aws:iam::11111111111:user&#x2F;s3-demo&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:GetObject&quot;,</span><br><span class="line">                &quot;s3:PutObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws-cn:s3:::sensors2aws&#x2F;*&quot;,</span><br><span class="line">                &quot;arn:aws-cn:s3:::sensors2aws&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="步骤三：创建B存储桶"><a href="#步骤三：创建B存储桶" class="headerlink" title="步骤三：创建B存储桶"></a>步骤三：创建B存储桶</h1><p><strong>同理，在账号 B 中也创建一个 S3 存储桶，作为目标存储桶。</strong>具体操作过程请参考<strong>创建A存储桶</strong>。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgpLPZ-QUolJKjwAIwyAY4wgI.png" alt=" "></p><h1 id="步骤四：B账号添加IAM策略"><a href="#步骤四：B账号添加IAM策略" class="headerlink" title="步骤四：B账号添加IAM策略"></a>步骤四：B账号添加IAM策略</h1><p><strong>在账户 B 中，创建 IAM 客户托管策略。</strong></p><p>点击 <strong>服务</strong>，进入 <strong>IAM 服务控制台</strong>，选择 <strong>策略</strong>，选择 <strong>创建策略</strong>，接着选择 <strong>JSON</strong>；</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgtLPZ-QUo3Mv34gcwyAY4mQI.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgvLPZ-QUo3r6FowUwyAY4pQM.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAgx7PZ-QUo-Mb5wwQwyAY47QI.png" alt=" "></p><p>接着，将以下 IAM 策略复制进去，并修改以下相关配置：</p><p><strong>sourcebucketname</strong> 替换为源存储桶的名称，即在账户 A 中创建的 S3 存储桶名称；</p><p><strong>destinationbucketname</strong> 替换为目标存储桶的名称，即在账户 B 中创建的 S3 存储桶名称。</p><p>这条策略是允许 IAM 用户将对象从账户 A 中的源存储桶复制到账户 B 中的目标存储桶。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:GetObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::source_bucket_name&quot;,</span><br><span class="line">                &quot;arn:aws:s3:::source_bucket_name&#x2F;*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:PutObject&quot;,</span><br><span class="line">                &quot;s3:PutObjectAcl&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::destination_bucket_name&quot;,</span><br><span class="line">                &quot;arn:aws:s3:::destination_bucket_name&#x2F;*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中国区域</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:GetObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws-cn:s3:::source_bucket_name&quot;,</span><br><span class="line">                &quot;arn:aws-cn:s3:::source_bucket_name&#x2F;*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:PutObject&quot;,</span><br><span class="line">                &quot;s3:PutObjectAcl&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws-cn:s3:::destination_bucket_name&quot;,</span><br><span class="line">                &quot;arn:aws-cn:s3:::destination_bucket_name&#x2F;*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再接着，选择 <strong>查看策略</strong>，输入策略的 <strong>名称和描述</strong>，最后选择 <strong>创建策略</strong>。</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAg47PZ-QUoluKrmQcwyAY4gQQ.png" alt=" "></p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/ABUIABAEGAAg6rPZ-QUoxPyD4gYwyAY45AI.png" alt=" "></p><h1 id="步骤五：创建B账户的IAM用户"><a href="#步骤五：创建B账户的IAM用户" class="headerlink" title="步骤五：创建B账户的IAM用户"></a><strong>步骤五</strong>：创建B账户的IAM用户</h1><p><strong>在账号 B 中，创建 IAM 用户。并将步骤 4 中的 IAM 策略附加到该用户中[1]。</strong>具体操作步骤可以参考以下官方文档：</p><p>[1] <a href="https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/id_users_create.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/IAM/latest/UserGuide/id_users_create.html</a></p><p>注意：请把用户的访问密钥（访问密钥 ID 和秘密访问密钥）下载下来，后续会用到。</p><h1 id="步骤六：本地安装CLI工具"><a href="#步骤六：本地安装CLI工具" class="headerlink" title="步骤六：本地安装CLI工具"></a>步骤六：本地安装CLI工具</h1><p><strong>在本地电脑安装AWS CLI 工具[2]，并配置账号 B 的访问密钥[3]。</strong></p><p>具体操作步骤可以参考以下官方文档：</p><p>[2] <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-install.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-install.html</a></p><p>[3] <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-configure.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-configure.html</a></p><h1 id="步骤七：测试跨账号复制"><a href="#步骤七：测试跨账号复制" class="headerlink" title="步骤七：测试跨账号复制"></a>步骤七：测试跨账号复制</h1><p>请在账号 A 的存储桶上传一个文件，并在账户 B 中的 IAM 用户可以使用 AWS 命令行界面 (AWS CLI) 运行 sync 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 sync s3:&#x2F;&#x2F;source_bucket_name   s3:&#x2F;&#x2F;destination_bucket_name</span><br></pre></td></tr></table></figure><p>并修改以下相关配置：</p><p><strong>sourcebucketname</strong> 替换为源存储桶的名称，即在账户 A 中创建的 S3 存储桶名称；</p><p><strong>destinationbucketname</strong> 替换为目标存储桶的名称，即在账户 B 中创建的 S3 存储桶名称。</p><p><strong>原始地址</strong>：</p><p><a href="https://www.ecloudrover.com/h-nd-112.html" target="_blank" rel="noopener">https://www.ecloudrover.com/h-nd-112.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;场景背景&quot;&gt;&lt;a href=&quot;#场景背景&quot;
        
      
    
    </summary>
    
    
      <category term="迁移" scheme="https://blog.wjzhe.ml/categories/%E8%BF%81%E7%A7%BB/"/>
    
    
      <category term="AWS" scheme="https://blog.wjzhe.ml/tags/AWS/"/>
    
      <category term="AWS S3" scheme="https://blog.wjzhe.ml/tags/AWS-S3/"/>
    
      <category term="migrate" scheme="https://blog.wjzhe.ml/tags/migrate/"/>
    
      <category term="转载" scheme="https://blog.wjzhe.ml/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
