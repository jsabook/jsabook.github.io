<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qier&#39;s blog</title>
  <icon>http://yoursite.com/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-02-15T05:12:23.446Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>qier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Summary</title>
    <link href="http://yoursite.com/2022/02/15/Summary/"/>
    <id>http://yoursite.com/2022/02/15/Summary/</id>
    <published>2022-02-15T05:12:23.446Z</published>
    <updated>2022-02-15T05:12:23.446Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AWS的IOPS</title>
    <link href="http://yoursite.com/2022/02/13/IopsOfAWS/"/>
    <id>http://yoursite.com/2022/02/13/IopsOfAWS/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2022-02-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOPS介绍"><a href="#IOPS介绍" class="headerlink" title="IOPS介绍"></a>IOPS介绍</h1><p>IOPS(Input/Output Per Second) 每秒的读写次数，是衡量磁盘性能的主要指标之一。IOPS是指单位时间内系统能够处理的I/O请求数量。也就是讲的是单位时间内，磁盘能够进行多少次的I/O读写。</p><p><strong>Random Read IOPS，100%随机读负载情况下的IOPS</strong></p><p>默认为4k大小的数据块</p><h2 id="读写性能介绍"><a href="#读写性能介绍" class="headerlink" title="读写性能介绍"></a><strong>读写性能介绍</strong></h2><p>硬盘的读写性能又称为数据吞吐量(Throughput)，指的是单位时间内可以成功传输的数据数量。对于大量顺序读写的应用，如VOD，则更关注吞吐量指标。简单来讲，就是每秒磁盘I/O的流量。即磁盘写入加上磁盘读出的数据的大小。</p><h2 id="IOPS与吞吐量的关系"><a href="#IOPS与吞吐量的关系" class="headerlink" title="IOPS与吞吐量的关系"></a>IOPS与吞吐量的关系</h2><p>IOPS = </p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;IOPS介绍&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="EC2" scheme="http://yoursite.com/categories/EC2/"/>
    
    
      <category term="EC2" scheme="http://yoursite.com/tags/EC2/"/>
    
      <category term="RDS" scheme="http://yoursite.com/tags/RDS/"/>
    
      <category term="EBS" scheme="http://yoursite.com/tags/EBS/"/>
    
  </entry>
  
  <entry>
    <title>vitess学习</title>
    <link href="http://yoursite.com/2022/01/25/vitesssummary/"/>
    <id>http://yoursite.com/2022/01/25/vitesssummary/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2022-01-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vitess组件说明"><a href="#vitess组件说明" class="headerlink" title="vitess组件说明"></a>vitess组件说明</h1><p><img src="img/method-draw-image.svg" alt="method-draw-image"></p><h1 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h1><p><img src="http://image.masikkk.com/blog/vitess-architecture-2.jpeg" alt="img"></p><p>从架构图可以看出来vttablet、shard与vtgate的关系：</p><p>一</p><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show vitess_tablets;</span><br></pre></td></tr></table></figure><p>查看相关表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show vitess_tablets;</span><br><span class="line">+-------+----------+-------+------------+---------+------------------+-------------+----------------------+</span><br><span class="line">| Cell  | Keyspace | Shard | TabletType | State   | Alias            | Hostname    | PrimaryTermStartTime |</span><br><span class="line">+-------+----------+-------+------------+---------+------------------+-------------+----------------------+</span><br><span class="line">| zone1 | sbtest   | -     | PRIMARY    | SERVING | zone1-2344898534 | 172.17.0.10 | 2022-01-25T18:04:19Z |</span><br><span class="line">| zone1 | sbtest   | -     | REPLICA    | SERVING | zone1-2646235096 | 172.17.0.9  |                      |</span><br><span class="line">+-------+----------+-------+------------+---------+------------------+-------------+----------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;vitess组件说明&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://yoursite.com/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS Route53功能汇总</title>
    <link href="http://yoursite.com/2022/01/12/AwsRoute53Summary/"/>
    <id>http://yoursite.com/2022/01/12/AwsRoute53Summary/</id>
    <published>2022-01-12T16:00:00.000Z</published>
    <updated>2022-01-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a73a603c48ea48209ca29479386fb6ec72e92cfa4e32365b08c52de83b2716f">db082def6a4e6e63f0ffa32ac468c42a627e29bfa4e17763852cdd73df70e1164dfb928f01ee95625dca55e655a48b4e846d53f584e43f615ecd0d1ef33928813d25a3322d72898f6889221ea21de820884b0664e8c6903b7684c90d823f304678d94379f046011bebb4c7601ef21688974430ac9dd0dadd0452f60ffd3fbdc90ffa21f1030d40d55f4fade898c3d83b584aa7ba99371a48fbcee0afc292c0af98f0415a6692d55b9518dc7f72da5c2879d4fa49d8f908ae1abe48a3bc68df3b434b2aeffd7b054a967713cb6c6ce9cff9712387f9a3afdf03cd485d09eadfa0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="AWS" scheme="http://yoursite.com/categories/AWS/"/>
    
    
      <category term="Route" scheme="http://yoursite.com/tags/Route/"/>
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>python记录</title>
    <link href="http://yoursite.com/2022/01/04/pythonsummary/"/>
    <id>http://yoursite.com/2022/01/04/pythonsummary/</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-01-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python日志模块"><a href="#python日志模块" class="headerlink" title="python日志模块"></a>python日志模块</h1><h2 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru</h2><p>简单的python日志模块——<code>loguru</code></p><p>如何使用loguru？<a href="https://www.jianshu.com/p/2945634fe349" target="_blank" rel="noopener">使用loguru记录日志</a></p><h1 id="安全模块"><a href="#安全模块" class="headerlink" title="安全模块"></a>安全模块</h1><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>(不要用JWT替代session管理（上）：全面了解Token,JWT,OAuth,SAML,SSO)[<a href="https://zhuanlan.zhihu.com/p/38942172]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38942172]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;python日志模块&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="小记" scheme="http://yoursite.com/categories/%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>浏览器可复制技巧</title>
    <link href="http://yoursite.com/2021/12/27/webtexteditor/"/>
    <id>http://yoursite.com/2021/12/27/webtexteditor/</id>
    <published>2021-12-27T16:00:00.000Z</published>
    <updated>2021-12-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一种</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.contentEditable&#x3D;true</span><br></pre></td></tr></table></figure><p><strong>第二种</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.innerText</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;第一种&lt;/strong&gt;&lt;/p&gt;
&lt;fig
        
      
    
    </summary>
    
    
      <category term="小计" scheme="http://yoursite.com/categories/%E5%B0%8F%E8%AE%A1/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>资源汇总</title>
    <link href="http://yoursite.com/2021/12/20/resourcesummary/"/>
    <id>http://yoursite.com/2021/12/20/resourcesummary/</id>
    <published>2021-12-20T16:00:00.000Z</published>
    <updated>2022-01-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sublime-text-教程"><a href="#sublime-text-教程" class="headerlink" title="sublime text 教程"></a>sublime text 教程</h2><p>sublime text3 字体大小的设置方法 <a href="https://blog.csdn.net/csdn_chenli/article/details/68060943" target="_blank" rel="noopener">https://blog.csdn.net/csdn_chenli/article/details/68060943</a></p><p>SublimeText3中使用terminal终端 <a href="https://www.codenong.com/cs105923270/" target="_blank" rel="noopener">https://www.codenong.com/cs105923270/</a></p><p>sublime text 3安装过程、语言汉化、基本插件安装、重要快捷键汇总 <a href="https://blog.csdn.net/qq_36595013/article/details/83039267" target="_blank" rel="noopener">https://blog.csdn.net/qq_36595013/article/details/83039267</a></p><p>有哪些炫酷的sublime text3 主题？ <a href="https://www.zhihu.com/question/46266742" target="_blank" rel="noopener">https://www.zhihu.com/question/46266742</a></p><p>sublime text 教程 <a href="https://www.w3cschool.cn/sublimetext/" target="_blank" rel="noopener">https://www.w3cschool.cn/sublimetext/</a> </p><h2 id="资源网站-amp-破解软件"><a href="#资源网站-amp-破解软件" class="headerlink" title="资源网站&amp;破解软件"></a>资源网站&amp;破解软件</h2><p>视频资源网站</p><p>乐于分享 <a href="https://masuit.com/" target="_blank" rel="noopener">https://masuit.com/</a></p><p>果核剥壳 <a href="https://www.ghxi.com/" target="_blank" rel="noopener">https://www.ghxi.com/</a></p><p>阿刚同学 <a href="https://www.isharepc.com/" target="_blank" rel="noopener">https://www.isharepc.com/</a></p><h2 id="视频网站"><a href="#视频网站" class="headerlink" title="视频网站"></a>视频网站</h2><p>天下无鱼 <a href="https://shikey.com/" target="_blank" rel="noopener">https://shikey.com/</a></p><p>乐于分享 <a href="https://masuit.com/" target="_blank" rel="noopener">https://masuit.com/</a></p><h2 id="AWS-教程"><a href="#AWS-教程" class="headerlink" title="AWS 教程"></a><strong>AWS 教程</strong></h2><p><a href="http://www.cloudbin.cn/?cat=135" target="_blank" rel="noopener"><a href="http://www.cloudbin.cn/" target="_blank" rel="noopener">IT Lab Service – Bing哥的博客</a></a></p><p><a href="https://study.163.com/course/introduction/1209592940.htm" target="_blank" rel="noopener">sap视频教程</a></p><p><a href="https://www.iloveaws.cn/" target="_blank" rel="noopener">aws爱好者</a></p><p><a href="https://iteablue.com/" target="_blank" rel="noopener">挨踢茶馆</a></p><p><a href="https://www.youtube.com/channel/UCazV3A3_1-Mtd6E_auw_ifg" target="_blank" rel="noopener">小马技术</a></p><p><a href="https://zh.quish.tv/top-70-aws-architect-interview-questions" target="_blank" rel="noopener">2019 年 70 大 AWS 架构师面试问题和答案</a></p><h1 id="博客记录"><a href="#博客记录" class="headerlink" title="博客记录"></a>博客记录</h1><p><a href="https://phenix3443.github.io/notebook/" target="_blank" rel="noopener">phenix3443的博客</a></p><p><a href="http://masikkk.com/" target="_blank" rel="noopener">小马的笔记</a></p><p><a href="https://zhuleichina.github.io/" target="_blank" rel="noopener">ZhuLei Blog</a></p><h1 id="Linux-记录"><a href="#Linux-记录" class="headerlink" title="Linux 记录"></a>Linux 记录</h1><p><a href="https://blog.csdn.net/qq_33633013/article/details/108469982" target="_blank" rel="noopener">安装Mysql客户端</a></p><h1 id="K8s记录"><a href="#K8s记录" class="headerlink" title="K8s记录"></a>K8s记录</h1><p><strong>如何pvc绑定到pv</strong>？<a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-persistent-volume-storage/" target="_blank" rel="noopener">配置 Pod 以使用 PersistentVolume 作为存储</a></p><h1 id="软件适配"><a href="#软件适配" class="headerlink" title="软件适配"></a>软件适配</h1><p><strong>云盘软件</strong></p><p>filebrowser——最简单的云盘软件，适合快速搭建，局域网内传输文件，<a href="https://filebrowser.org/" target="_blank" rel="noopener">https://filebrowser.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;sublime-text-教程&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="资源" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Terraformer安装与使用</title>
    <link href="http://yoursite.com/2021/12/20/terraformerinstaller/"/>
    <id>http://yoursite.com/2021/12/20/terraformerinstaller/</id>
    <published>2021-12-20T16:00:00.000Z</published>
    <updated>2021-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h1><p>根据go.mod文件查看go的版本要求</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20211221144228939.png" alt="image-20211221144228939"></p><p>下载go安装包<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;golang.google.cn&#x2F;dl&#x2F;go1.17.linux-amd64.tar.gz</span><br><span class="line">sudo tar -zxvf go1.17.linux-amd64.tar.gz -C &#x2F;opt</span><br><span class="line">&#x2F;opt&#x2F;go&#x2F;bin&#x2F;go version</span><br></pre></td></tr></table></figure><p>修改环境变量<code>vi /etc/profile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT&#x3D;&#x2F;opt&#x2F;go</span><br><span class="line">export GOPATH&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;go</span><br><span class="line">export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn</span><br><span class="line">export GOARCH&#x3D;amd64</span><br><span class="line">export GOOS&#x3D;linux</span><br><span class="line">export GOTOOLS&#x3D;$GOROOT&#x2F;pkg&#x2F;tool</span><br><span class="line">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure><p>使环境变量生效<code>source /etc/profile</code></p><h1 id="编译terraformer"><a href="#编译terraformer" class="headerlink" title="编译terraformer"></a>编译terraformer</h1><ul><li><p>Run git clone  &amp;&amp; cd terraformer/</p></li><li><p>Run git clone  &amp;&amp; cd terraformer/ </p></li><li><p>Run go mod download (下载模块到本地缓存，缓存路径是 $GOPATH/pkg/mod/cache) </p></li><li><p>Run go build -v for all providers OR build with one provider: go run build/main.go {google,aws,azure,kubernetes and etc}</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20211221144524483.png" alt="image-20211221144524483"></p></li><li><p>.Run terraform init against a versions.tf file to install the plugins required for your platform. For example, if you need plugins for the google provider, versions.tf should contain:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">required_providers &#123;</span><br><span class="line">google &#x3D; &#123;</span><br><span class="line">source &#x3D; &quot;hashicorp&#x2F;google&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">required_version &#x3D; &quot;&gt;&#x3D; 0.13&quot;</span><br><span class="line">&#125;</span><br><span class="line"># if need aws</span><br><span class="line">terraform &#123;</span><br><span class="line">required_providers &#123;</span><br><span class="line">aws &#x3D; &#123;</span><br><span class="line">source &#x3D; &quot;hashicorp&#x2F;aws&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Or alternatively Copy your Terraform provider’s plugin(s) to</p><p>folder ~/.terraform.d/plugins/{darwin,linux}_amd64/, as appropriate.</p><p>cp terraform-provider-aws_v3.57.0_x5 /root/.terraform.d/plugins/linux_amd64/</p></li></ul><h1 id="terraform-安装"><a href="#terraform-安装" class="headerlink" title="terraform 安装"></a>terraform 安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;releases.hashicorp.com&#x2F;terraform&#x2F;1.0.5&#x2F;terraform_1.0.5_linux_amd64.zip</span><br><span class="line">$ unzip terraform_1.0.5_linux_amd64.zip</span><br><span class="line">$ sudo cp terraform &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">$ which terraform</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;terraform</span><br><span class="line">$ terraform init</span><br></pre></td></tr></table></figure><p>默认会下载aws插件到当前隐藏目录 ./terraform/.terraform/providers/registry.terraform.io/hashicorp/aws/3.57.0/linux_amd64/terraformprovider-aws_v3.57.0_x5</p><p>国内下载不了插件，可以去github下载release进行go编译;或者翻墙下载 <a href="https://registry.terraform.io/providers/hashicorp/aws/latest" target="_blank" rel="noopener">https://registry.terraform.io/providers/hashicorp/aws/latest</a></p><h1 id="资源tf抓取测试"><a href="#资源tf抓取测试" class="headerlink" title="资源tf抓取测试"></a>资源tf抓取测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;terraformer-aws import aws --resources s3</span><br><span class="line">2021&#x2F;09&#x2F;03 10:25:53 aws importing default region</span><br><span class="line">2021&#x2F;09&#x2F;03 10:25:56 aws importing... s3</span><br><span class="line">2021&#x2F;09&#x2F;03 10:26:14 aws done importing s3</span><br><span class="line">2021&#x2F;09&#x2F;03 10:26:14 Number of resources for service s3: 3</span><br></pre></td></tr></table></figure><p>文件会保存在当前的generated目录下</p><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/image-20211221144945997.png" alt="image-20211221144945997"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;安装go环境&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="terraform" scheme="http://yoursite.com/tags/terraform/"/>
    
  </entry>
  
  <entry>
    <title>AWS ALB数据流变化</title>
    <link href="http://yoursite.com/2021/12/19/albchangeto/"/>
    <id>http://yoursite.com/2021/12/19/albchangeto/</id>
    <published>2021-12-19T16:00:00.000Z</published>
    <updated>2021-12-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h1><p><img src="https://raw.githubusercontent.com/jsabook/githubPic/main/myblog/albnatdrawio.svg" alt="albnatdrawio"></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>ALB与EC2通信需要满足以下两个要素：</p><ul><li>ALB与EC2之间需要能能够进行通信；</li><li>ALB再公网区域；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;拓扑图&quot;&gt;&lt;a href=&quot;#拓扑图&quot;
        
      
    
    </summary>
    
    
      <category term="EC2" scheme="http://yoursite.com/categories/EC2/"/>
    
    
      <category term="EC2" scheme="http://yoursite.com/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>Terraform入门教程笔记</title>
    <link href="http://yoursite.com/2021/12/13/terraformlearn/"/>
    <id>http://yoursite.com/2021/12/13/terraformlearn/</id>
    <published>2021-12-13T16:00:00.000Z</published>
    <updated>2021-12-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><strong>Terraform</strong>：HashiCorp Terraform是一个IT基础架构自动化编排工具，可以用代码来管理维护IT资源。它编写了描述云资源拓扑的配置文件中的基础结构，例如虚拟机、存储账户和网络接口。其就是高度标准化。</p><h1 id="Terraform代码规范"><a href="#Terraform代码规范" class="headerlink" title="Terraform代码规范"></a><strong>Terraform代码规范</strong></h1><p>推荐以下代码规范：</p><ul><li>使用两个空格缩进</li><li>同一缩进层级的多个赋值语句以等号对齐：</li><li>当块体内同时有参数赋值以及内嵌块时，请先编写参数赋值，然后是内嵌块。参数与内嵌块之间空一行分隔；</li><li>对于同时包含参数赋值以及元参数赋值的块，请先编写元参数赋值语句，然后是参数赋值语句，之间空一行分隔。元参数块请置于块体的最后，空一行分隔：</li><li>顶层块之间应空一行分隔。内嵌块之间也应该空一行分隔，除非是相同类型的内嵌块(比如resource块内部多个provisioner块)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;example&quot; &#123;</span><br><span class="line">  count &#x3D; 2 # meta-argument first 元参数赋值</span><br><span class="line"></span><br><span class="line">  ami           &#x3D; &quot;abc123&quot;# 元参数赋值</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;# 元参数赋值</span><br><span class="line"></span><br><span class="line">  network_interface &#123;# 参数赋值</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lifecycle &#123; # # 参数赋值</span><br><span class="line">    create_before_destroy &#x3D; true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Terraform-基础概念"><a href="#Terraform-基础概念" class="headerlink" title="Terraform 基础概念"></a>Terraform 基础概念</h1><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a><strong>Provider</strong></h2><p>Terraform被设计成一个多云基础设施编排工具，不像CloudFormation那样绑定AWS平台，Terraform可以同时编排各种云平台或是其他基础设施的资源。Terraform实现多云编排的方法就是Provider插件机制。</p><p><img src="https://gitee.com/lonegunman/introduction-to-terraform-pic/raw/master/2020-11-16/1605496195438-image.png" alt="Terraform通过RPC调用插件，插件代码通过调用SDK操作远程资源"></p><p><strong>Provider</strong> 缓存机制</p><p>默认情况下，当完成 <strong>terraform init</strong>  之后，项目文件夹中就会创建<strong>.terraform</strong>文件夹，并且会下载Provider的相关插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.terraform</span><br><span class="line">└── plugins</span><br><span class="line">    ├── registry.terraform.io</span><br><span class="line">    │   └── ucloud</span><br><span class="line">    │       └── ucloud</span><br><span class="line">    │           └── 1.22.0</span><br><span class="line">    │               └── darwin_amd64 -&gt; /Users/byers/.terraform.d/plugin-cache/registry.terraform.io/ucloud/ucloud/1.22.0/darwin_amd64</span><br><span class="line">    └── selections.json</span><br></pre></td></tr></table></figure><p>有的时候下载某些Provider会非常缓慢，或是在开发环境中存在许多的Terraform项目，每个项目都保有自己独立的插件文件夹非常浪费磁盘，这时我们可以使用插件缓存。有两种方式可以启用插件缓存：</p><p><strong>第一种方法</strong>是配置<code>TF_PLUGIN_CACHE_DIR</code>这个环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TF_PLUGIN_CACHE_DIR&#x3D;&quot;$HOME&#x2F;.terraform.d&#x2F;plugin-cache&quot;</span><br></pre></td></tr></table></figure><p><strong>第二种方法</strong>是使用CLI配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin_cache_dir &#x3D; &quot;$HOME&#x2F;.terraform.d&#x2F;plugin-cache&quot;</span><br></pre></td></tr></table></figure><p>当启用插件缓存之后，每当执行<code>terraform init</code>命令时，Terraform引擎会首先检查期望使用的插件在缓存文件夹中是否已经存在，如果存在，那么就会将缓存的插件拷贝到当前工作目录下的<code>.terraform</code>文件夹内。如果插件不存在，那么Terraform仍然会像之前那样下载插件，并首先保存在插件文件夹中，随后再从插件文件夹拷贝到当前工作目录下的<code>.terraform</code>文件夹内。为了尽量避免同一份插件被保存多次，只要操作系统提供支持，Terraform就会使用符号连接而不是实际从插件缓存目录拷贝到工作目录。</p><p>同时需要注意的是，Terrafom引擎永远不会主动删除缓存文件夹中的插件，缓存文件夹的尺寸可能会随着时间而增长到非常大，这时需要手工清理。</p><h2 id="Provider的声明"><a href="#Provider的声明" class="headerlink" title="Provider的声明"></a>Provider的声明</h2><p>一组Terraform代码要被执行，相关的Provider必须在代码中被声明。不少的Provider在声明时需要传入一些关键信息才能被使用。不同的Provider所需要的关键信息也是不尽相同的，因此这里需要注意一下。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">terraform</span> &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    ucloud    = &#123;</span><br><span class="line">      source  = <span class="string">"ucloud/ucloud"</span></span><br><span class="line">      version = <span class="string">"&gt;=1.24.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">provider</span> <span class="string">"ucloud"</span> &#123;</span><br><span class="line">  public_key  = <span class="string">"your_public_key"</span></span><br><span class="line">  private_key = <span class="string">"your_private_key"</span></span><br><span class="line">  project_id  = <span class="string">"your_project_id"</span></span><br><span class="line">  region      = <span class="string">"cn-bj2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一部分的HCL（HashiCorp Configuration Language）也说明了如何进行声明一个Provider。</p><ul><li>required_providers 所需要的providers版本<ul><li>ucloud，声明了本段代码必须要名为ucloud的Provider才可以执行。</li><li>source = “ucloud/ucloud”，这一行声明了ucloud这个插件的源地址(Source Address)。一个源地址是全球唯一的，它指示了Terraform如何下载该插件。</li><li>version = “&gt;=1.24.1”，声明了该源码所需要的插件的版本约束。</li></ul></li><li>provider</li></ul><h2 id="多Provider实例"><a href="#多Provider实例" class="headerlink" title="多Provider实例"></a><strong>多Provider实例</strong></h2><p>一个Local Name是在一个模块中对一个Provider的唯一的标识。可以声明多个同类型的Provider，并给予不同的Local Name，也就是同时操作多个云资源环境。这使得我们可以在一组配置文件中同时操作不同区域、不同账号的资源。</p><p>这里提供了两种方式协助我们使用多Provider实例：</p><ul><li>指明Provider key</li><li>Alias 别名</li></ul><p><strong>显视指明Provider Local Name</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">terraform</span> &#123;</span><br><span class="line">  required_version = <span class="string">"&gt;=0.13.5"</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    ucloudbj  = &#123;</span><br><span class="line">      source  = <span class="string">"ucloud/ucloud"</span></span><br><span class="line">      version = <span class="string">"&gt;=1.24.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ucloudsh  = &#123;</span><br><span class="line">      source  = <span class="string">"ucloud/ucloud"</span></span><br><span class="line">      version = <span class="string">"&gt;=1.24.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">provider</span> <span class="string">"ucloudbj"</span> &#123;</span><br><span class="line">  public_key  = <span class="string">"your_public_key"</span></span><br><span class="line">  private_key = <span class="string">"your_private_key"</span></span><br><span class="line">  project_id  = <span class="string">"your_project_id"</span></span><br><span class="line">  region      = <span class="string">"cn-bj2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">provider</span> <span class="string">"ucloudsh"</span> &#123;</span><br><span class="line">  public_key  = <span class="string">"your_public_key"</span></span><br><span class="line">  private_key = <span class="string">"your_private_key"</span></span><br><span class="line">  project_id  = <span class="string">"your_project_id"</span></span><br><span class="line">  region      = <span class="string">"cn-sh2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> "ucloud_security_groups" "default" &#123;</span></span><br><span class="line"><span class="class">  <span class="title">provider</span> = <span class="title">ucloudbj</span></span></span><br><span class="line"><span class="class">  <span class="title">type</span>     = "<span class="title">recommend_web</span>"</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> "ucloud_images" "default" &#123;</span></span><br><span class="line"><span class="class">  <span class="title">provider</span>          = <span class="title">ucloudsh</span></span></span><br><span class="line"><span class="class">  <span class="title">availability_zone</span> = "<span class="title">cn</span>-<span class="title">sh2</span>-01"</span></span><br><span class="line"><span class="class">  <span class="title">name_regex</span>        = "^<span class="type">CentOS</span> 6.5 64"</span></span><br><span class="line"><span class="class">  <span class="title">image_type</span>        = "<span class="title">base</span>"</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>例如上面的例子，声明了两个UCloud Provider，分别定位在北京区域和上海区域。在接下来的data声明中显式指定了provider的Local Name</p><p><strong>Alias别名</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">terraform</span> &#123;</span><br><span class="line">  required_version = <span class="string">"&gt;=0.13.5"</span></span><br><span class="line">  required_providers &#123;</span><br><span class="line">    ucloud    = &#123;</span><br><span class="line">      source  = <span class="string">"ucloud/ucloud"</span></span><br><span class="line">      version = <span class="string">"&gt;=1.24.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">provider</span> <span class="string">"ucloud"</span> &#123;</span><br><span class="line">  public_key  = <span class="string">"your_public_key"</span></span><br><span class="line">  private_key = <span class="string">"your_private_key"</span></span><br><span class="line">  project_id  = <span class="string">"your_project_id"</span></span><br><span class="line">  region      = <span class="string">"cn-bj2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">provider</span> <span class="string">"ucloud"</span> &#123;</span><br><span class="line">  alias       = <span class="string">"ucloudsh"</span></span><br><span class="line">  public_key  = <span class="string">"your_public_key"</span></span><br><span class="line">  private_key = <span class="string">"your_private_key"</span></span><br><span class="line">  project_id  = <span class="string">"your_project_id"</span></span><br><span class="line">  region      = <span class="string">"cn-sh2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> "ucloud_security_groups" "default" &#123;</span></span><br><span class="line"><span class="class">  <span class="title">type</span> = "<span class="title">recommend_web</span>"</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> "ucloud_images" "default" &#123;</span></span><br><span class="line"><span class="class">  <span class="title">provider</span>          = <span class="title">ucloud</span>.<span class="title">ucloudsh</span></span></span><br><span class="line"><span class="class">  <span class="title">availability_zone</span> = "<span class="title">cn</span>-<span class="title">sh2</span>-01"</span></span><br><span class="line"><span class="class">  <span class="title">name_regex</span>        = "^<span class="type">CentOS</span> 6.5 64"</span></span><br><span class="line"><span class="class">  <span class="title">image_type</span>        = "<span class="title">base</span>"</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>这里的<code>required_providers</code>中只声明了一次<code>ucloud</code>，并且在data中指定provider时传入的是<code>ucloud.ucloudsh</code>。多实例Provider请使用别名。</p><h1 id="Terraform-代码编程"><a href="#Terraform-代码编程" class="headerlink" title="Terraform 代码编程"></a>Terraform 代码编程</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>原始类型分三类：string、number、bool。</p><ul><li>string代表一组Unicode字符串，例如：<code>&quot;hello&quot;</code>。</li><li>number代表数字，可以为整数，也可以为小数。</li><li>bool代表布尔值，要么为<code>true</code>，要么为<code>false</code>。bool值可以被用做逻辑判断。</li></ul><p><strong>数据格式转换</strong></p><p>隐式转换</p><p>number和bool都可以和string进行隐式转换，当我们把number或bool类型的值赋给string类型的值，或是反过来时，Terraform会自动替我们转换类型。</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a><strong>基础语法</strong></h2><h3 id="Count—循环结构"><a href="#Count—循环结构" class="headerlink" title="Count—循环结构"></a>Count—循环结构</h3><p><strong>定义count</strong></p><p><code>count</code>参数可以是任意自然数，Terraform会创建<code>count</code>个资源实例，每一个实例都对应了一个独立的基础设施对象，并且在执行Terraform代码时，这些对象是被分别创建、更新或者销毁的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">resource</span> <span class="string">"aws_instance"</span> <span class="string">"server"</span> &#123;</span><br><span class="line">  count = <span class="number">4</span> # create four similar <span class="type">EC2</span> instances</span><br><span class="line"></span><br><span class="line">  ami           = <span class="string">"ami-a1b2c3d4"</span></span><br><span class="line">  instance_type = <span class="string">"t2.micro"</span></span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    <span class="type">Name</span> = <span class="string">"Server $&#123;count.index&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Resource块中的表达式里使用count对象来获取当前的count索引号，count对象只有一个属性<code>count.index</code>，代表当前对象对应的<code>count</code>下标索引(从0开始)。</p><p><strong>访问count</strong></p><p>如果一个Resource块定义了count参数，那么Terraform会把这种多资源实例对象与没有count参数的单资源实例对象区别开。</p><ul><li>访问单资源实例对象：<code>&lt;TYPE&gt;.&lt;NAME&gt;</code>(例如：<code>aws_instance.server</code>)</li><li>访问多资源实例对象：<code>&lt;TYPE&gt;.&lt;NAME&gt;[&lt;INDEX&gt;]</code> (例如：<code>aws_instance.server[0]</code>，<code>aws_instance.server[1]</code>)</li></ul><h3 id="for-each—循环结构"><a href="#for-each—循环结构" class="headerlink" title="for_each—循环结构"></a>for_each—循环结构</h3><p>for each的参数可以是一个map或者set，Terraform会为集合中的每一个元素都创建一个独立的资源对象。</p><p><strong>使用map</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;azurerm_resource_group&quot; &quot;rg&quot; &#123;</span><br><span class="line">  for_each &#x3D; &#123;</span><br><span class="line">    a_group &#x3D; &quot;eastus&quot;</span><br><span class="line">    another_group &#x3D; &quot;westus2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  name     &#x3D; each.key</span><br><span class="line">  location &#x3D; each.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用set(string)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_iam_user&quot; &quot;the-accounts&quot; &#123;</span><br><span class="line">  for_each &#x3D; toset( [&quot;Todd&quot;, &quot;James&quot;, &quot;Alice&quot;, &quot;Dottie&quot;] )</span><br><span class="line">  name     &#x3D; each.key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在声明了<code>for_each</code>参数的resource块内使用<code>each</code>对象来访问当前的迭代器对象：</p><ul><li><code>each.key</code>：map的键，或是set中的值</li><li><code>each.value</code>：map的值，或是set中的值</li></ul><p><strong>访问属性</strong></p><p>当一个resource声明了for_each时，Terraform会把这种多资源实例对象与没有count参数的单资源实例对象区别开：</p><ul><li>访问单资源实例对象：<code>&lt;TYPE&gt;.&lt;NAME&gt;</code>(例如：<code>aws_instance.server</code>)</li><li>访问多资源实例对象：<code>&lt;TYPE&gt;.&lt;NAME&gt;[&lt;KE&gt;]</code> (例如：<code>aws_instance.server[&quot;ap-northeast-1&quot;]</code>，<code>aws_instance.server[&quot;ap-northeast-2&quot;]</code>)</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Terraform支持三种数据结构：列表、映射类型、集合类型；</p><p><strong>list</strong>：列表是一组值的连续集合，可以用下标访问内部元素，下标从0开始。例如名为l的list，l[0]就是第一个元素。list类型的声明可以是list(number)、list(string)、list(bool)等，括号中的类型即为元素类型。</p><p><strong>map</strong>:字典类型(或者叫映射类型)，代表一组键唯一的键值对，键类型必须是string，值类型任意。map(number)代表键为string类型而值为number类型，其余类推。map值有两种声明方式，一种是类似<code>{&quot;foo&quot;: &quot;bar&quot;, &quot;bar&quot;: &quot;baz&quot;}</code>，另一种是<code>{foo=&quot;bar&quot;, bar=&quot;baz&quot;}</code>。键可以不用双引号，但如果键是以数字开头则例外。多对键值对之间要用逗号分隔，也可以用换行符分隔。推荐使用=号(Terraform代码规范中规定按等号对齐，使用等号会使得代码在格式化后更加美观)</p><p><strong>set</strong>:集合类型，代表一组不重复的值。</p><h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a><strong>配置语法</strong></h2><p><strong>参数</strong></p><p>参数赋值就是将一个值赋给一个特定的名称：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">image_id</span> = <span class="string">"abc123"</span></span><br></pre></td></tr></table></figure><p>等号前的标识符就是参数名，等号后的表达式就是参数值。参数赋值时Terraform会检查类型是否匹配。参数名是确定的，参数值可以是确定的字面量硬编码，也可以是一组表达式，用以通过其他的值加以计算得出结果值。</p><p><strong>块(Block)</strong></p><p>一个块是包含一组其他参数的容器，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">resource</span> <span class="string">"aws_instance"</span> <span class="string">"example"</span> &#123;</span><br><span class="line">  ami = <span class="string">"abc123"</span></span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块由块类型、块标签和块主体构成，上面例子中的</p><ul><li>块类型：resource</li><li>块标签：aws_instance</li><li>块主题：example</li></ul><p><strong>注释</strong></p><p>Terraform支持三种注释：</p><ul><li><code>#</code> 单行注释，其后的内容为注释</li><li><code>//</code> 单行注释，其后的内容为注释</li><li><code>/*</code> 和 <code>*/</code>，多行注释，可以注释多行</li></ul><p>默认情况下单行注释优先使用#。自动化格式整理工具会自动把//替换成#。</p><h2 id="输入变量"><a href="#输入变量" class="headerlink" title="输入变量"></a>输入变量</h2><p>如果我们把一组Terraform代码想像成一个函数，那么输入变量就是函数的入参。输入变量用<code>variable</code>块进行定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">variable</span> <span class="string">"image_id"</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> = string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">variable</span> <span class="string">"availability_zone_names"</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span>    = list(<span class="title">string</span>)</span></span><br><span class="line">  <span class="keyword">default</span> = ["us-west-1a"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">variable</span> <span class="string">"docker_ports"</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> = list(<span class="title">object</span>(&#123;</span></span><br><span class="line"><span class="class">    <span class="title">internal</span> = <span class="title">number</span></span></span><br><span class="line"><span class="class">    <span class="title">external</span> = <span class="title">number</span></span></span><br><span class="line"><span class="class">    <span class="title">protocol</span> = <span class="title">string</span></span></span><br><span class="line"><span class="class">  &#125;))</span></span><br><span class="line">  <span class="keyword">default</span> = [</span><br><span class="line">    &#123;</span><br><span class="line">      internal = <span class="number">8300</span></span><br><span class="line">      external = <span class="number">8300</span></span><br><span class="line">      protocol = <span class="string">"tcp"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同一个Terraform模块中的变量名必须是唯一的，可以在代码中通过<code>var.&lt;Name&gt;</code>来进行引用。输入变量只能在声明该变量的目录下的代码中使用，输入变量块中可以定义一些属性。</p><p><strong>类型</strong></p><p>可以在输入变量块中通过<code>type</code>定义类型，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;name&quot; &#123;</span><br><span class="line">    type &#x3D; string</span><br><span class="line">&#125;</span><br><span class="line">variable &quot;ports&quot; &#123;</span><br><span class="line">    type &#x3D; list(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了类型的输入变量只能被赋予符合类型约束的值。</p><p><strong>默认值</strong></p><p>默认值定义了当Terraform无法获得一个输入变量得到值的时候会使用的默认值。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;name&quot; &#123;</span><br><span class="line">    type    &#x3D; string</span><br><span class="line">    default &#x3D; &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Terraform无法通过其他途径获得name的值时，<code>var.name</code>的值为<code>&quot;John Doe&quot;</code></p><p><strong>描述</strong></p><p>可以在输入变量中定义一个描述，简单地向调用者描述该变量的意义和用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;image_id&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;The id of the machine image (AMI) to use for the server.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在执行<code>terraform plan</code>或是<code>terraform apply</code>时Terraform不知道某个输入变量的值，Terraform会在命令行界面上提示我们为输入变量设置一个值。例如上面的输入变量代码，执行<code>terraform apply</code>时：</p><p><strong>断言</strong></p><p>通过断言来约束输入输入变量是否符合规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;image_id&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;The id of the machine image (AMI) to use for the server.&quot;</span><br><span class="line"></span><br><span class="line">  validation &#123;</span><br><span class="line">    condition     &#x3D; length(var.image_id) &gt; 4 &amp;&amp; substr(var.image_id, 0, 4) &#x3D;&#x3D; &quot;ami-&quot;</span><br><span class="line">    error_message &#x3D; &quot;The image_id value must be a valid AMI id, starting with \&quot;ami-\&quot;.&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Condition参数是一个bool类型的参数，我们可以用一个表达式来定义如何界定输入变量是合法的。当contidion为true时输入变量合法，反之不合法。condition表达式中只能通过var.\引用当前定义的变量，并且它的计算不能产生错误。</p><h3 id="对输入变量赋值"><a href="#对输入变量赋值" class="headerlink" title="对输入变量赋值"></a><strong>对输入变量赋值</strong></h3><p><strong>命令行参数</strong></p><p>对输入变量赋值有几种途径，一种是在调用terraform plan或是terraform apply命令时以参数的形式传入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply -var=<span class="string">"image_id=ami-abc123"</span></span><br><span class="line">$ terraform apply -var=<span class="string">'image_id_list=["ami-abc123","ami-def456"]'</span></span><br><span class="line">$ terraform plan -var=<span class="string">'image_id_map=&#123;"us-east-1":"ami-abc123","us-east-2":"ami-def456"&#125;'</span></span><br></pre></td></tr></table></figure><p>可以在一条命令中使用多个<code>-var</code>参数。</p><p><strong>参数文件</strong></p><p>第二种方法是使用参数文件。参数文件的后缀名可以是<code>.tfvars</code>或是<code>.tfvars.json</code>。<code>.tfvars</code>文件使用HCL语法，<code>.tfvars.json</code>使用JSON语法。</p><p>以<code>.tfvars</code>为例，参数文件中用HCL代码对需要赋值的参数进行赋值，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image_id &#x3D; &quot;ami-abc123&quot;</span><br><span class="line">availability_zone_names &#x3D; [</span><br><span class="line">  &quot;us-east-1a&quot;,</span><br><span class="line">  &quot;us-west-1c&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>后缀名为<code>.tfvars.json</code>的文件用一个JSON对象来对输入变量赋值，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"image_id"</span>: <span class="string">"ami-abc123"</span>,</span><br><span class="line">  <span class="attr">"availability_zone_names"</span>: [<span class="string">"us-west-1a"</span>, <span class="string">"us-west-1c"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用terraform命令时，通过<code>-var-file</code>参数指定要用的参数文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var-file=<span class="string">"testing.tfvars"</span></span><br></pre></td></tr></table></figure><p><strong>交互界面传值</strong></p><p>在前面介绍断言的例子中我们看到过，当我们从命令行界面执行terraform操作，Terraform无法通过其他途径获取一个输入变量的值，而该变量也没有定义默认值时，Terraform会进行最后的尝试，在交互界面上要求我们给出变量值.</p><p><strong>输入变量赋值优先级</strong></p><p>当上述的赋值方式同时存在时，同一个变量可能会被赋值多次。Terraform会使用新值覆盖旧值。</p><p>Terraform加载变量值的顺序是：</p><ol><li>环境变量</li><li><code>terraform.tfvars</code>文件(如果存在的话)</li><li><code>terraform.tfvars.json</code>文件(如果存在的话)</li><li>所有的<code>.auto.tfvars</code>或者<code>.auto.tfvars.json</code>文件，以字母顺序排序处理</li><li>通过<code>-var</code>或是<code>-var-file</code>命令行参数传递的输入变量，按照在命令行参数中定义的顺序加载</li></ol><p>假如以上方式均未能成功对变量赋值，那么Terraform会尝试使用默认值；对于没有定义默认值的变量，Terraform会采用交互界面方式要求用户输入一个。对于某些Terraform命令，如果执行时带有<code>-input=false</code>参数禁用了交互界面传值方式，那么就会报错。</p><h2 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h2><p><strong>输出值的声明</strong></p><p>输出值的声明使用输出块，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output &quot;instance_ip_addr&quot; &#123;</span><br><span class="line">  value &#x3D; aws_instance.server.private_ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>output</code>关键字后紧跟的就是输出值的名称。在当前模块内的所有输出值的名字都必须是唯一的。<code>output</code>块内的<code>value</code>参数即为输出值，它可以像是上面的例子里那样某个resource的输出属性，也可以是任意合法的表达式。</p><p>输出值只有在执行<code>terraform apply</code>后才会被计算，光是使用<code>terraform plan</code>并不会计算输出值。</p><p>Terraform代码中无法引用本目录下定义的输出值。</p><p><strong>description</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output &quot;instance_ip_addr&quot; &#123;</span><br><span class="line">  value       &#x3D; aws_instance.server.private_ip</span><br><span class="line">  description &#x3D; &quot;The private IP address of the main server instance.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与输入变量的<code>description</code>类似，我们不再赘述。</p><p><strong>depends_on</strong></p><p>在同一个 Terraform 配置文件中可以包含多个资源。通过在资源中引用其他资源的属 性值，Terraform可以自动推断出资源的依赖关系。然而，某些资源的依赖关系对于 Terraform是不可见的，这就需要使用 depends_on 来创建显式依赖。我们可以使用 depends_on 来更改资源的创建顺序或执行顺序，使其在所依赖资源之后处理。 depends_on 的表达式是依赖资源的地址列表。</p><p>例如我们在远程操作一台ECS服务器之 前，需要为其绑定EIP或配置NAT规则。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">output &quot;instance_ip_addr&quot; &#123;</span><br><span class="line">  value       &#x3D; aws_instance.server.private_ip</span><br><span class="line">  description &#x3D; &quot;The private IP address of the main server instance.&quot;</span><br><span class="line"></span><br><span class="line">  depends_on &#x3D; [</span><br><span class="line">    # Security group rule must be created before this IP address could</span><br><span class="line">    # actually be used, otherwise the services will be unreachable.</span><br><span class="line">    aws_security_group_rule.local_access,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部值"><a href="#局部值" class="headerlink" title="局部值"></a><strong>局部值</strong></h2><p>todo</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><strong>Resources</strong></p><p><strong>variable</strong></p><p><strong>data</strong></p><p><strong>output</strong></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>资源是Terraform最重要的组成部分，而本节亦是本教程最重要的一节。资源通过resource块来定义，一个resource可以定义一个或多个基础设施资源对象，例如VPC、虚拟机，或是DNS记录、Consul的键值对数据等。</p><p>一个Resource代表了想要创建的基础设施建设。每当Terraform按照一个resource块创建了一个新的基础设施对象，这个实际的对象的id会被保存进Terraform状态中，使得将来Terraform可以根据变更计划对它进行更新或是销毁操作。</p><h3 id="访问资源输出属性"><a href="#访问资源输出属性" class="headerlink" title="访问资源输出属性"></a>访问资源输出属性</h3><p>在表达式中引用资源属性的语法是<code>&lt;RESOURCE TYPE&gt;.&lt;NAME&gt;.&lt;ATTRIBUTE&gt;</code>。</p><h3 id="资源的依赖关系"><a href="#资源的依赖关系" class="headerlink" title="资源的依赖关系"></a>资源的依赖关系</h3><p>正常情况下，Terraform定义的Resource之间不会有特定的依赖关系。大部分资源间的依赖关系可以被Terraform自动处理，Terraform会分析resource块内的表达式，根据表达式的引用链来确定资源之间的引用，进而计算出资源在创建、更新、销毁时的执行顺序。大部分情况下，我们不需要显式指定资源之间的依赖关系。</p><p>但是，创建某些资源所需的信息依赖于另外一个资源创建之后的输出属性。这种情况下，我们需要用<code>depends_on</code>来显式声明这种依赖关系。</p><h3 id="元参数"><a href="#元参数" class="headerlink" title="元参数"></a>元参数</h3><p>resource块支持几种元参数声明，这些元参数可以被声明在所有类型的resource块内，它们将会改变资源的行为：</p><ul><li>depends_on：显式声明依赖关系</li><li>count：创建多个资源实例</li><li>for_each：迭代集合，为集合中每一个元素创建一个对应的资源实例</li><li>provider：指定非默认Provider实例</li><li>lifecycle：自定义资源的生命周期行为</li><li>provisioner 和 connection：在资源创建后执行一些额外的操作</li></ul><h2 id="数据data"><a href="#数据data" class="headerlink" title="数据data"></a><strong>数据data</strong></h2><p>todo</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>todo</p><h2 id="重载文件"><a href="#重载文件" class="headerlink" title="重载文件"></a>重载文件</h2><p>todo</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://lonegunmanb.github.io/introduction-terraform/1.Terraform%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C.html" target="_blank" rel="noopener">https://lonegunmanb.github.io/introduction-terraform/1.Terraform%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot;
        
      
    
    </summary>
    
    
      <category term="Terraform" scheme="http://yoursite.com/categories/Terraform/"/>
    
    
      <category term="Cloud" scheme="http://yoursite.com/tags/Cloud/"/>
    
  </entry>
  
</feed>
